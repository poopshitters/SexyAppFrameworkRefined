@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c -----------------------------------------------------------------------------
@node Effects
@section Effects

These functions are for special effects processing.
Not all effects are all that special.
All effects are post processing routines that are either built-in to SDL_mixer or
created by you.  Effects can be applied to individual channels, or to the final
mixed stream which contains all the channels including music.

@menu
@b{Registration}
* Mix_RegisterEffect::             Hook a processor to a channel
* Mix_UnregisterEffect::           Unhook a processor from a channel
* Mix_UnregisterAllEffects::       Unhook all processors from a channel
* Mix_RegisterMusicEffect::        Hook a processor to a music @b{[Mixer X]}
* Mix_UnregisterMusicEffect::      Unhook a processor from a music @b{[Mixer X]}
* Mix_UnregisterAllMusicEffects::  Unhook all processors from a music @b{[Mixer X]}
* Mix_SetPostMix::                 Hook in a postmix processor

@b{Built-in Processors}
* Mix_SetPanning::                  Stereo panning for a channel
* Mix_SetDistance::                 Distance attenuation (volume)
* Mix_SetPosition::                 Panning(angular) and distance
* Mix_SetReverseStereo::            Swap stereo left and right
* Mix_SetMusicEffectPanning::       Stereo panning for a music @b{[Mixer X]}
* Mix_SetMusicEffectDistance::      Distance attenuation (volume) for a music @b{[Mixer X]}
* Mix_SetMusicEffectPosition::      Panning(angular) and distance for a music @b{[Mixer X]}
* Mix_SetMusicEffectReverseStereo:: Swap stereo left and right for a music @b{[Mixer X]}
@c Mix_SetReverb::                non-functional, yet
@end menu

The built-in processors: @code{Mix_SetPanning, Mix_SetPosition, Mix_SetDistance, and@*
Mix_SetReverseStereo}, all look for an environment variable, @b{MIX_EFFECTSMAXSPEED} to be
defined.
If the environment variable is defined these processors may use more memory or reduce the quality of the effects, all for better speed.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_RegisterEffect
@subsection Mix_RegisterEffect
@findex Mix_RegisterEffect

@example
int @b{Mix_RegisterEffect}(int @var{chan}, Mix_EffectFunc_t @var{f}, Mix_EffectDone_t @var{d},
                       void *@var{arg})
@end example

@table @var
@item chan
channel number to register @var{f} and @var{d} on.@*
Use @b{MIX_CHANNEL_POST} to process the postmix stream.
@item f
The function pointer for the effects processor.
@item d
The function pointer for any cleanup routine to be called when the channel is done playing a sample.@*
This may be @b{NULL} for any processors that don't need to clean up any memory or other dynamic data.
@item arg
A pointer to data to pass into the @var{f}'s and @var{d}'s @code{udata} parameter.  It is a good place to keep the state data for the processor, especially if the processor is made to handle multiple channels at the same time.@*
This may be @b{NULL}, depending on the processor.
@end table

@noindent
Hook a processor function @var{f} into a channel for post processing effects.  You may just be reading the data and displaying it, or you may be altering the stream to add an echo.  Most processors also have state data that they allocate as they are in use, this would be stored in the @var{arg} pointer data space.  When a processor is finished being used, any function passed into @var{d} will be called, which is when your processor should clean up the data in the @var{arg} data space.@*
The effects are put into a linked list, and always appended to the end, meaning they always work on previously registered effects output.  Effects may be added multiple times in a row.  Effects are cumulative this way.

@noindent
@b{Returns}: Zero on errors, such as a nonexisting channel.

@cartouche
@example
// make a passthru processor function that does nothing...
void noEffect(int chan, void *stream, int len, void *udata)
@{
    // you could work with stream here...
@}
...
// register noEffect as a postmix processor
if(!Mix_RegisterEffect(MIX_CHANNEL_POST, noEffect, NULL, NULL)) @{
    printf("Mix_RegisterEffect: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterEffect},
@ref{Mix_UnregisterAllEffects}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_UnregisterEffect
@subsection Mix_UnregisterEffect
@findex Mix_UnregisterEffect

@noindent
@code{int @b{Mix_UnregisterEffect}(int @var{channel}, Mix_EffectFunc_t @var{f})}

@table @var
@item channel
Channel number to remove @var{f} from as a post processor.@*
Use @b{MIX_CHANNEL_POST} for the postmix stream.
@item f
The function to remove from @var{channel}.
@end table

@noindent
Remove the oldest (first found) registered effect function @var{f} from the effect list for @var{channel}.  This only removes the first found occurance of that function, so it may need to be called multiple times if you added the same function multiple times, just stop removing when @code{Mix_UnregisterEffect} returns an error, to remove all occurances of @var{f} from a channel.@*
If the channel is active the registered effect will have its @code{Mix_EffectDone_t} function called, if it was specified in @code{Mix_RegisterEffect}.

@noindent
@b{Returns}: Zero on errors, such as invalid channel, or effect function not registered on channel.

@cartouche
@example
// unregister the noEffect from the postmix effects
// this removes all occurances of noEffect registered to the postmix
while(Mix_UnregisterEffect(MIX_CHANNEL_POST, noEffect));
// you may print Mix_GetError() if you want to check it.
// it should say "No such effect registered" after this loop.
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterAllEffects},
@ref{Mix_RegisterEffect}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_UnregisterAllEffects
@subsection Mix_UnregisterAllEffects
@findex Mix_UnregisterAllEffects

@noindent
@code{int @b{Mix_UnregisterAllEffects}(int @var{channel})}

@table @var
@item channel
Channel to remove all effects from.@*
Use @b{MIX_CHANNEL_POST} for the postmix stream.
@end table

@noindent
This removes all effects registered to @var{channel}.
If the channel is active all the registered effects will have their @code{Mix_EffectDone_t} functions called, if they were specified in @code{Mix_RegisterEffect}.

@noindent
@b{Returns}: Zero on errors, such as @var{channel} not existing.

@cartouche
@example
// remove all effects from channel 0
if(!Mix_UnregisterAllEffects(0)) @{
    printf("Mix_UnregisterAllEffects: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterEffect},
@ref{Mix_RegisterEffect}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_RegisterMusicEffect
@subsection Mix_RegisterMusicEffect
@findex Mix_RegisterMusicEffect

@example
int @b{Mix_RegisterMusicEffect}(Mix_Music *@var{music}, Mix_MusicEffectFunc_t @var{f},
                                Mix_MusicEffectDone_t @var{d}, void *@var{arg})
@end example

@table @var
@item music
music to register @var{f} and @var{d} on.@*
@item f
The function pointer for the music effects processor.
@item d
The function pointer for any cleanup routine to be called when the music is getting closed up.@*
This may be @b{NULL} for any processors that don't need to clean up any memory or other dynamic data.
@item arg
A pointer to data to pass into the @var{f}'s and @var{d}'s @code{udata} parameter.  It is a good place
to keep the state data for the processor, especially if the processor is made to handle multiple channels
at the same time.@*
This may be @b{NULL}, depending on the processor.
@end table

@noindent
Hook a processor function @var{f} into a music for post processing effects.  You may just be reading
the data and displaying it, or you may be altering the stream to add an echo.  Most processors also have
state data that they allocate as they are in use, this would be stored in the @var{arg} pointer data space.
When a processor is finished being used, any function passed into @var{d} will be called, which is when
your processor should clean up the data in the @var{arg} data space.@*
The effects are put into a linked list, and always appended to the end, meaning they always work on
previously registered effects output.  Effects may be added multiple times in a row.
Effects are cumulative this way.

@noindent
@b{Returns}: Zero on errors, such as a nonexisting music.

@cartouche
@example
// make a passthru processor function that does nothing...
void noEffect(Mix_Music *music, void *stream, int len, void *udata)
@{
    // you could work with stream here...
@}
...

// Mix_Music *someMusic = Mix_LoadMUS("somemusic.ogg");
// register noEffect as a someMusic processor
if(!Mix_RegisterMusicEffect(someMusic, noEffect, NULL, NULL)) @{
    printf("Mix_RegisterMusicEffect: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterMusicEffect},
@ref{Mix_UnregisterAllMusicEffects}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_UnregisterMusicEffect
@subsection Mix_UnregisterMusicEffect
@findex Mix_UnregisterMusicEffect

@noindent
@code{int @b{Mix_UnregisterMusicEffect}(Mix_Music @var{music}, Mix_MusicEffectFunc_t @var{f})}

@table @var
@item music
Music to remove @var{f} from as a post processor.@*
@item f
The function to remove from @var{music}.
@end table

@noindent
Remove the oldest (first found) registered effect function @var{f} from the effect list for @var{channel}.
This only removes the first found occurance of that function, so it may need to be called multiple times
if you added the same function multiple times, just stop removing when @code{Mix_UnregisterMusicEffect} returns
an error, to remove all occurances of @var{f} from a channel.@*
If the music is active the registered effect will have its @code{Mix_MusicEffectDone_t} function called,
if it was specified in @code{Mix_RegisterMusicEffect}.

@noindent
@b{Returns}: Zero on errors, such as invalid music, or effect function not registered on music.

@cartouche
@example
// unregister the noEffect from the someMusic effects
// this removes all occurances of noEffect registered to the postmix
while(Mix_UnregisterMusicEffect(someMusic, noEffect));
// you may print Mix_GetError() if you want to check it.
// it should say "No such effect registered" after this loop.
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_RegisterMusicEffect},
@ref{Mix_UnregisterAllMusicEffects}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_UnregisterAllMusicEffects
@subsection Mix_UnregisterAllMusicEffects
@findex Mix_UnregisterAllMusicEffects

@noindent
@code{int @b{Mix_UnregisterAllMusicEffects}(Mix_Music *@var{music})}

@table @var
@item music
Music to remove all effects from.@*
@end table

@noindent
This removes all effects registered to @var{music}.
If the music is active all the registered effects will have their @code{Mix_MusicEffectDone_t} functions called, if they were specified in @code{Mix_RegisterMusicEffect}.

@noindent
@b{Returns}: Zero on errors, such as @var{music} not existing.

@cartouche
@example
// remove all effects from someMusic
if(!Mix_UnregisterAllMusicEffects(someMusic)) @{
    printf("Mix_UnregisterAllMusicEffects: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_RegisterMusicEffect},
@ref{Mix_UnregisterMusicEffect}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetPostMix
@subsection Mix_SetPostMix
@findex Mix_SetPostMix

@example
void @b{Mix_SetPostMix}(void (*@var{mix_func})(void *udata, Uint8 *stream, int len),
                    void *@var{arg})
@end example

@table @var
@item mix_func
The function pointer for the postmix processor.@*
@b{NULL} unregisters the current postmixer.
@item arg
A pointer to data to pass into the @var{mix_func}'s @code{udata} parameter.  It is a good place to keep the state data for the processor, especially if the processor is made to handle multiple channels at the same time.@*
This may be @b{NULL}, depending on the processor.
@end table

@noindent
Hook a processor function @var{mix_func} to the postmix stream for post processing effects.  You may just be reading the data and displaying it, or you may be altering the stream to add an echo.  Most processors also have state data that they allocate as they are in use, this would be stored in the @var{arg} pointer data space.
This processor is never really finished, until the audio device is closed, or you pass @b{NULL} as the @var{mix_func}.@*
There can only be one postmix function used at a time through this method.  Use @code{Mix_RegisterEffect(MIX_CHANNEL_POST, mix_func, NULL, arg)} to use multiple postmix processors.@*
This postmix processor is run AFTER all the registered postmixers set up by @code{Mix_RegisterEffect}.

@cartouche
@example
// make a passthru processor function that does nothing...
void noEffect(void *udata, Uint8 *stream, int len)
@{
    // you could work with stream here...
@}
...
// register noEffect as a postmix processor
Mix_SetPostMix(noEffect, NULL);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_RegisterEffect}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetPanning
@subsection Mix_SetPanning
@findex Mix_SetPanning

@noindent
@code{int @b{Mix_SetPanning}(int @var{channel}, Uint8 @var{left}, Uint8 @var{right})}

@table @var
@item channel
Channel number to register this effect on.@*
Use @b{MIX_CHANNEL_POST} to process the postmix stream.
@item left
Volume for the left channel, range is 0(silence) to 255(loud)
@item right
Volume for the left channel, range is 0(silence) to 255(loud)
@end table

@noindent
This effect will only work on stereo audio.  Meaning you called @code{Mix_OpenAudio}
with 2 channels (@b{MIX_DEFAULT_CHANNELS}).  The easiest way to do true panning is to call
@code{Mix_SetPanning(channel, left, 254 - left);} so that the total volume is correct,
if you consider the maximum volume to be 127 per channel for center, or 254 max for left, this works, but about halves the effective volume.@*
This Function registers the effect for you, so don't try to @code{Mix_RegisterEffect} it yourself.@*
@b{NOTE}: Setting both @var{left} and @var{right} to 255 will unregister the effect from
@var{channel}.  You cannot unregister it any other way, unless you use
@code{Mix_UnregisterAllEffects} on the @var{channel}.@*
@b{NOTE}: Using this function on a mono audio device will not register the effect, nor will it return an error status.


@noindent
@b{Returns}: Zero on errors, such as bad channel, or if @code{Mix_RegisterEffect} failed.

@cartouche
@example
// pan channel 1 halfway to the left
if(!Mix_SetPanning(1, 255, 127)) @{
    printf("Mix_SetPanning: %s\n", Mix_GetError());
    // no panning, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetPosition},
@ref{Mix_UnregisterAllEffects}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetDistance
@subsection Mix_SetDistance
@findex Mix_SetDistance

@noindent
@code{int @b{Mix_SetDistance}(int @var{channel}, Uint8 @var{distance})}

@table @var
@item channel
Channel number to register this effect on.@*
Use @b{MIX_CHANNEL_POST} to process the postmix stream.
@item distance
Specify the distance from the listener, from 0(close/loud) to 255(far/quiet).
@end table

@noindent
This effect simulates a simple attenuation of volume due to distance.  The volume never quite reaches silence, even at max distance.@*
@b{NOTE}: Using a @var{distance} of 0 will cause the effect to unregister itself from @var{channel}.  You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllEffects} on the @var{channel}.

@noindent
@b{Returns}: Zero on errors, such as an invalid channel, or if @code{Mix_RegisterEffect} failed.

@cartouche
@example
// distance channel 1 to be farthest away
if(!Mix_SetDistance(1, 255)) @{
    printf("Mix_SetDistance: %s\n", Mix_GetError());
    // no distance, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetPosition},
@ref{Mix_UnregisterAllEffects}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetPosition
@subsection Mix_SetPosition
@findex Mix_SetPosition

@noindent
@code{int @b{Mix_SetPosition}(int @var{channel}, Sint16 @var{angle}, Uint8 @var{distance})}

@table @var
@item channel
Channel number to register this effect on.@*
Use @b{MIX_CHANNEL_POST} to process the postmix stream.
@item angle
Direction in relation to forward from 0 to 360 degrees.  Larger angles will be reduced to this range using @code{@var{angles} % 360}.@*
0 = directly in front.@*
90 = directly to the right.@*
180 = directly behind.@*
270 = directly to the left.@*
So you can see it goes clockwise starting at directly in front.@*
This ends up being similar in effect to @code{Mix_SetPanning}.
@item distance
The distance from the listener, from 0(near/loud) to 255(far/quiet).@*
This is the same as the @code{Mix_SetDistance} effect.
@end table

@noindent
This effect emulates a simple 3D audio effect.  It's not all that realistic, but it can help improve some level of realism.  By giving it the angle and distance from the camera's point of view, the effect pans and attenuates volumes.  If you are looking for better positional audio, using @b{OpenAL} is suggested.@*
@b{NOTE}: Using @var{angle} and @var{distance} of 0, will cause the effect to unregister itself from @var{channel}.  You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllEffects} on the @var{channel}.

@noindent
@b{Returns}: Zero on errors, such as an invalid channel, or if @code{Mix_RegisterEffect} failed.

@cartouche
@example
// set channel 2 to be behind and right, and 100 units away
if(!Mix_SetPosition(2, 135, 100)) @{
    printf("Mix_SetPosition: %s\n", Mix_GetError());
    // no position effect, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetPanning},
@ref{Mix_SetDistance},
@ref{Mix_UnregisterAllEffects}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetReverseStereo
@subsection Mix_SetReverseStereo
@findex Mix_SetReverseStereo

@noindent
@code{int @b{Mix_SetReverseStereo}(int @var{channel}, int @var{flip})}

@table @var
@item channel
Channel number to register this effect on.@*
Use @b{MIX_CHANNEL_POST} to process the postmix stream.
@item flip
Must be non-zero to work, means nothing to the effect processor itself.@*
set to zero to unregister the effect from @var{channel}.
@end table

@noindent
Simple reverse stereo, swaps left and right channel sound.@*
@b{NOTE}: Using a @var{flip} of 0, will cause the effect to unregister itself from @var{channel}.  You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllEffects} on the @var{channel}.

@noindent
@b{Returns}: Zero on errors, such as an invalid channel, or if @code{Mix_RegisterEffect} failed.

@cartouche
@example
// set the total mixer output to be reverse stereo
if(!Mix_SetReverseStereo(MIX_CHANNEL_POST, 1)) @{
    printf("Mix_SetReverseStereo: %s\n", Mix_GetError());
    // no reverse stereo, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterAllEffects}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicEffectPanning
@subsection Mix_SetMusicEffectPanning
@findex Mix_SetMusicEffectPanning

@noindent
@code{int @b{Mix_SetMusicEffectPanning}(Mix_Music *@var{music}, Uint8 @var{left}, Uint8 @var{right})}

@table @var
@item music
Music to register this effect on.@*
@item left
Volume for the left channel, range is 0(silence) to 255(loud)
@item right
Volume for the left channel, range is 0(silence) to 255(loud)
@end table

@noindent
This effect will only work on stereo audio.  Meaning you called @code{Mix_OpenAudio}
with 2 channels (@b{MIX_DEFAULT_CHANNELS}).  The easiest way to do true panning is to call
@code{Mix_SetMusicEffectPanning(music, left, 254 - left);} so that the total volume is correct,
if you consider the maximum volume to be 127 per channel for center, or 254 max for left, this works,
but about halves the effective volume.@*
This Function registers the effect for you, so don't try to @code{Mix_RegisterMusicEffect} it yourself.@*
@b{NOTE}: Setting both @var{left} and @var{right} to 255 will unregister the effect from
@var{music}.  You cannot unregister it any other way, unless you use
@code{Mix_UnregisterAllMusicEffects} on the @var{music}.@*
@b{NOTE}: Using this function on a mono audio device will not register the effect,
nor will it return an error status.


@noindent
@b{Returns}: Zero on errors, such as bad music, or if @code{Mix_RegisterMusicEffect} failed.

@cartouche
@example
// pan someMusic halfway to the left
if(!Mix_SetMusicEffectPanning(someMusic, 255, 127)) @{
    printf("Mix_SetMusicEffectPanning: %s\n", Mix_GetError());
    // no panning, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicEffectPosition},
@ref{Mix_UnregisterAllMusicEffects}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicEffectDistance
@subsection Mix_SetMusicEffectDistance
@findex Mix_SetMusicEffectDistance

@noindent
@code{int @b{Mix_SetMusicEffectDistance}(Mix_Music *@var{music}, Uint8 @var{distance})}

@table @var
@item music
Music to register this effect on.@*
@item distance
Specify the distance from the listener, from 0(close/loud) to 255(far/quiet).
@end table

@noindent
This effect simulates a simple attenuation of volume due to distance.
The volume never quite reaches silence, even at max distance.@*
@b{NOTE}: Using a @var{distance} of 0 will cause the effect to unregister itself from @var{channel}.
You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllMusicEffects} on the @var{music}.

@noindent
@b{Returns}: Zero on errors, such as an invalid music, or if @code{Mix_RegisterMusicEffect} failed.

@cartouche
@example
// distance someMusic to be farthest away
if(!Mix_SetMusicEffectDistance(someMusic, 255)) @{
    printf("Mix_SetMusicEffectDistance: %s\n", Mix_GetError());
    // no distance, is it ok?
@}
@end example
@end cartouche


@noindent
@b{See Also}:@*
@ref{Mix_SetMusicEffectPosition},
@ref{Mix_UnregisterAllMusicEffects}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicEffectPosition
@subsection Mix_SetMusicEffectPosition
@findex Mix_SetMusicEffectPosition

@noindent
@code{int @b{Mix_SetMusicEffectPosition}(Mix_Music *@var{music}, Sint16 @var{angle}, Uint8 @var{distance})}

@table @var
@item music
Music to register this effect on.@*
@item angle
Direction in relation to forward from 0 to 360 degrees.  Larger angles will be reduced to this range using @code{@var{angles} % 360}.@*
0 = directly in front.@*
90 = directly to the right.@*
180 = directly behind.@*
270 = directly to the left.@*
So you can see it goes clockwise starting at directly in front.@*
This ends up being similar in effect to @code{Mix_SetMusicEffectPanning}.
@item distance
The distance from the listener, from 0(near/loud) to 255(far/quiet).@*
This is the same as the @code{Mix_SetMusicEffectDistance} effect.
@end table

@noindent
This effect emulates a simple 3D audio effect.
It's not all that realistic, but it can help improve some level of realism.
By giving it the angle and distance from the camera's point of view, the effect pans and attenuates volumes.
If you are looking for better positional audio, using @b{OpenAL} is suggested.@*
@b{NOTE}: Using @var{angle} and @var{distance} of 0, will cause the effect to unregister itself
from @var{music}.
You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllMusicEffects} on the @var{music}.

@noindent
@b{Returns}: Zero on errors, such as an invalid music, or if @code{Mix_RegisterMusicEffect} failed.

@cartouche
@example
// set someMusic to be behind and right, and 100 units away
if(!Mix_SetMusicEffectPosition(someMusic, 135, 100)) @{
    printf("Mix_SetMusicEffectPosition: %s\n", Mix_GetError());
    // no position effect, is it ok?
@}
@end example
@end cartouche


@noindent
@b{See Also}:@*
@ref{Mix_SetMusicEffectPanning},
@ref{Mix_SetMusicEffectDistance},
@ref{Mix_UnregisterAllMusicEffects}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicEffectReverseStereo
@subsection Mix_SetMusicEffectReverseStereo
@findex Mix_SetMusicEffectReverseStereo

@noindent
@code{int @b{Mix_SetMusicEffectReverseStereo}(Mix_Music *@var{music}, int @var{flip})}

@table @var
@item music
Music to register this effect on.@*
@item flip
Must be non-zero to work, means nothing to the effect processor itself.@*
set to zero to unregister the effect from @var{music}.
@end table

@noindent
Simple reverse stereo, swaps left and right channel sound.@*
@b{NOTE}: Using a @var{flip} of 0, will cause the effect to unregister itself from @var{music}.
You cannot unregister it any other way, unless you use @code{Mix_UnregisterAllMusicEffects} on the @var{music}.

@noindent
@b{Returns}: Zero on errors, such as an invalid music, or if @code{Mix_RegisterMusicEffect} failed.

@cartouche
@example
// set the someMusic to be reverse stereo
if(!Mix_SetMusicEffectReverseStereo(someMusic, 1)) @{
    printf("Mix_SetMusicEffectReverseStereo: %s\n", Mix_GetError());
    // no reverse stereo, is it ok?
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_UnregisterAllMusicEffects}
