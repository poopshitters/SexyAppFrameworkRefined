@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c -----------------------------------------------------------------------------
@node Samples
@section Samples
@tindex Mix_Chunk

These functions work with @t{Mix_Chunk} samples.

@menu
@b{Loading}
* Mix_GetNumChunkDecoders::  Number of sample format types that can be decoded
* Mix_GetChunkDecoder::      Name of enumerated sample format type decoder
* Mix_HasChunkDecoder::      Check if the specific chunk decodec is abailable by name in this build
* Mix_LoadWAV::              From a file
* Mix_LoadWAV_RW::           Using RWops
* Mix_QuickLoad_WAV::        From memory, in output format already
* Mix_QuickLoad_RAW::        From memory, in output format already

@b{Settings}
* Mix_VolumeChunk::          Set mix volume

@b{Freeing}
* Mix_FreeChunk::            Free sample
@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetNumChunkDecoders
@subsection Mix_GetNumChunkDecoders
@findex Mix_GetNumChunkDecoders

@noindent
@code{int @b{Mix_GetNumChunkDecoders}()}

@noindent
Get the number of sample chunk decoders available from the @code{Mix_GetChunkDecoder} function.  This number can be different for each run of a program, due to the change in availability of shared libraries that support each format.

@noindent
@b{Returns}: The number of sample chunk decoders available.

@cartouche
@example
// print the number of sample chunk decoders available
printf("There are %d sample chunk deocoders available\n", Mix_GetNumChunkDecoders());
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetNumMusicDecoders},
@ref{Mix_GetChunkDecoder},
@ref{Mix_HasChunkDecoder},
@ref{Mix_LoadWAV}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetChunkDecoder
@subsection Mix_GetChunkDecoder
@findex Mix_GetChunkDecoder

@noindent
@code{const char *@b{Mix_GetChunkDecoder}(int @var{index})}

@table @var
@item index
The index number of sample chunk decoder to get.@*
In the range from 0(zero) to Mix_GetNumChunkDecoders()-1, inclusive.
@end table

@noindent
Get the name of the @var{index}ed sample chunk decoder.
You need to get the number of sample chunk decoders available using the @code{Mix_GetNumChunkDecoders} function.

@noindent
@b{Returns}: The name of the @var{index}ed sample chunk decoder.  This string is owned by the SDL_mixer library, do not modify or free it.  It is valid until you call @code{Mix_CloseAudio} the final time.

@cartouche
@example
// print sample chunk decoders available
int i,max=Mix_GetNumChunkDecoders();
for(i=0; i<max; ++i)
	printf("Sample chunk decoder %d is for %s",Mix_GetChunkDecoder(i));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetNumChunkDecoders},
@ref{Mix_GetMusicDecoder},
@ref{Mix_HasChunkDecoder},
@ref{Mix_LoadWAV}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HasChunkDecoder
@subsection Mix_HasChunkDecoder
@findex Mix_HasChunkDecoder

@noindent
@code{SDL_bool @b{Mix_HasChunkDecoder}(const char *@var{name})}

@table @var
@item name
The decoder name to check it's presence.
@end table

@noindent
Check if the sample chunk decoder named as @var{name} presented in this library build.

@noindent
@b{Returns}: @code{SDL_TRUE} if the requested codec name is available in this library build or @code{SDL_FALSE} if not.

@noindent
@b{See Also}:@*
@ref{Mix_GetNumChunkDecoders},
@ref{Mix_GetChunkDecoder},
@ref{Mix_GetMusicDecoder},
@ref{Mix_LoadWAV}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadWAV
@subsection Mix_LoadWAV
@findex Mix_LoadWAV

@noindent
@code{Mix_Chunk *@b{Mix_LoadWAV}(char *@var{file})}

@table @var
@item file
File name to load sample from.
@end table

@noindent
Load @var{file} for use as a sample.  This is actually @code{Mix_LoadWAV_RW(SDL_RWFromFile(@var{file}, "rb"), 1)}.  This can load WAVE, AIFF, RIFF, OGG, FLAC, MP3, and VOC files.@*
@b{Note:} You must call SDL_OpenAudio before this. It must know the output characteristics so it can convert the sample for playback, it does this conversion at load time.

@noindent
@b{Returns}: a pointer to the sample as a @code{Mix_Chunk}.  @b{NULL} is returned on errors.

@cartouche
@example
// load sample.wav in to sample
Mix_Chunk *sample;
sample=Mix_LoadWAV("sample.wav");
if(!sample) @{
    printf("Mix_LoadWAV: %s\n", Mix_GetError());
    // handle error
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadWAV_RW},
@ref{Mix_QuickLoad_WAV},
@ref{Mix_FreeChunk}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadWAV_RW
@subsection Mix_LoadWAV_RW
@findex Mix_LoadWAV_RW

@noindent
@code{Mix_Chunk *@b{Mix_LoadWAV_RW}(SDL_RWops *@var{src}, int @var{freesrc})}

@table @var
@item src
The source SDL_RWops as a pointer.  The sample is loaded from this.
@item freesrc
A non-zero value mean is will automatically close/free the @var{src} for you.
@end table

@noindent
Load @var{src} for use as a sample.  This can load WAVE, AIFF, RIFF, OGG, FLAC, MP3, and VOC formats.
Using @code{SDL_RWops} is not covered here, but they enable you to load from almost any source.
@b{Note:} You must call SDL_OpenAudio before this. It must know the output characteristics so it can convert the sample for playback, it does this conversion at load time.

@noindent
@b{Returns}: a pointer to the sample as a @code{Mix_Chunk}.  @b{NULL} is returned on errors.

@cartouche
@example
// load sample.wav in to sample
Mix_Chunk *sample;
sample=Mix_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1);
if(!sample) @{
    printf("Mix_LoadWAV_RW: %s\n", Mix_GetError());
    // handle error
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadWAV},
@ref{Mix_QuickLoad_WAV},
@ref{Mix_FreeChunk}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_QuickLoad_WAV
@subsection Mix_QuickLoad_WAV
@findex Mix_QuickLoad_WAV

@noindent
@code{Mix_Chunk *@b{Mix_QuickLoad_WAV}(Uint8 *@var{mem})}

@table @var
@item mem
Memory buffer containing a WAVE file in output format.
@end table

@noindent
Load @var{mem} as a WAVE/RIFF file into a new sample.  The WAVE in @var{mem} must be already in the output format.  It would be better to use @code{Mix_LoadWAV_RW} if you aren't sure.@*
@b{Note}: This function does very little checking.  If the format mismatches the output format, or if the buffer is not a WAVE, it will not return an error.  This is probably a dangerous function to use.

@noindent
@b{Returns}: a pointer to the sample as a @code{Mix_Chunk}.  @b{NULL} is returned on errors.

@cartouche
@example
// quick-load a wave from memory
// Uint8 *wave; // I assume you have the wave loaded raw,
                // or compiled in the program...
Mix_Chunk *wave_chunk;
if(!(wave_chunk=Mix_QuickLoad_WAV(wave))) @{
    printf("Mix_QuickLoad_WAV: %s\n", Mix_GetError());
    // handle error
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadWAV},
@ref{Mix_QuickLoad_RAW},
@ref{Mix_FreeChunk}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_QuickLoad_RAW
@subsection Mix_QuickLoad_RAW
@findex Mix_QuickLoad_RAW

@noindent
@code{Mix_Chunk *@b{Mix_QuickLoad_RAW}(Uint8 *@var{mem})}

@table @var
@item mem
Memory buffer containing a WAVE file in output format.
@end table

@noindent
Load @var{mem} as a raw sample.  The data in @var{mem} must be already in the output format.  If you aren't sure what you are doing, this is not a good function for you!@*
@b{Note}: This function does very little checking.  If the format mismatches the output format it will not return an error.  This is probably a dangerous function to use.

@noindent
@b{Returns}: a pointer to the sample as a @code{Mix_Chunk}.  @b{NULL} is returned on errors, such as when out of memory.

@cartouche
@example
// quick-load a raw sample from memory
// Uint8 *raw; // I assume you have the raw data here,
                // or compiled in the program...
Mix_Chunk *raw_chunk;
if(!(raw_chunk=Mix_QuickLoad_RAW(raw))) @{
    printf("Mix_QuickLoad_RAW: %s\n", Mix_GetError());
    // handle error
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadWAV},
@ref{Mix_QuickLoad_WAV},
@ref{Mix_FreeChunk}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_VolumeChunk
@subsection Mix_VolumeChunk
@findex Mix_VolumeChunk

@noindent
@code{int @b{Mix_VolumeChunk}(Mix_Chunk *@var{chunk}, int @var{volume})}

@table @var
@item chunk
Pointer to the Mix_Chunk to set the volume in.
@item volume
The volume to use from 0 to @b{MIX_MAX_VOLUME}(128).@*
If greater than @b{MIX_MAX_VOLUME},@* then it will be set to @b{MIX_MAX_VOLUME}.@*
If less than 0 then @var{chunk}->volume will not be set.
@end table

@noindent
Set @var{chunk}->volume to @var{volume}.@*
The volume setting will take effect when the chunk is used on a channel, being mixed into the output.

@noindent
@b{Returns}: previous @var{chunk}->volume setting.  if you passed a negative value for @var{volume} then this volume is still the current volume for the @var{chunk}.

@cartouche
@example
// set the sample's volume to 1/2
// Mix_Chunk *sample;
int previous_volume;
previous_volume=Mix_VolumeChunk(sample, MIX_MAX_VOLUME/2);
printf("previous_volume: %d\n", previous_volume);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Chunk}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FreeChunk
@subsection Mix_FreeChunk
@findex Mix_FreeChunk

@noindent
@code{void @b{Mix_FreeChunk}(Mix_Chunk *@var{chunk})}

@table @var
@item chunk
Pointer to the Mix_Chunk to free.
@end table

@noindent
Free the memory used in @var{chunk}, and free @var{chunk} itself as well.
Do not use @var{chunk} after this without loading a new sample to it.
@b{Note}: It's a bad idea to free a chunk that is still being played...

@cartouche
@example
// free the sample
// Mix_Chunk *sample;
Mix_FreeChunk(sample);
sample=NULL; // to be safe...
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadWAV},
@ref{Mix_LoadWAV_RW},
@ref{Mix_QuickLoad_WAV},
