@c -----------------------------------------------------------------------------
@page
@node General
@section General

These functions are useful, as they are the only/best ways to work with SDL_mixer.

@menu
@b{Info}
* Mix_Linked_Version::    Get version number

@b{Activation}
* Mix_Init::                    Initialize SDL_mixer
* Mix_Quit::                    Cleanup SDL_mixer
* Mix_OpenAudio::               Open sound mixer
* Mix_OpenAudioDevice::         Open sound mixer with specific device @b{[Mixer 2.0]}
* Mix_PauseAudio::              Pause or resume the whole audio engine @b{[Mixer X]}
* Mix_CloseAudio::              Close sound mixer

@b{Manual audio output processing}
* Mix_InitMixer::               Initialize the Mixer internality without audio output @b{[Mixer X]}
* Mix_GetMusicMixer::           Get the internal single-stream music mixer callback for manual audio output processing @b{[Mixer X]}
* Mix_GetMultiMusicMixer::      Get the internal multi-stream music mixer callback for manual audio output processing @b{[Mixer X]}
* Mix_GetGeneralMixer::         Get the inernal gemeral mixer callback for manual audio output processing @b{[Mixer X]}
* Mix_FreeMixer::               Deinitialize and free all Mixer inetnality when used without audio output @b{[Mixer X]}

@b{Errors}
* Mix_SetError::                Set the current error string
* Mix_GetError::                Get the current error string

@b{Settings}
* Mix_QuerySpec::               Get output format
@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Linked_Version
@subsection Mix_Linked_Version
@findex Mix_Linked_Version
@findex SDL_MIXER_VERSION

@noindent
@code{const SDL_version *@b{Mix_Linked_Version}()}@*
@code{void @b{SDL_MIXER_VERSION}(SDL_version *compile_version)}

@noindent
This works similar to @code{SDL_Linked_Version} and @b{SDL_VERSION}.@*
Using these you can compare the runtime version to the version that you compiled with.

@cartouche
@example
SDL_version compile_version;
const SDL_version *link_version=Mix_Linked_Version();
SDL_MIXER_VERSION(&compile_version);
printf("compiled with SDL_mixer version: %d.%d.%d\n",
        compile_version.major,
        compile_version.minor,
        compile_version.patch);
printf("running with SDL_mixer version: %d.%d.%d\n",
        link_version->major,
        link_version->minor,
        link_version->patch);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio},
@ref{Mix_QuerySpec}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Init
@subsection Mix_Init
@findex Mix_Init

@noindent
@code{int @b{Mix_Init}(int @var{flags})}

@table @var
@item flags
bitwise OR'd set of sample/music formats to support by loading a library now.  The values you may OR together to pass in are:@*
@b{MIX_INIT_FLAC}@*
@b{MIX_INIT_MOD}@*
@b{MIX_INIT_MP3}@*
@b{MIX_INIT_OGG}@*
@b{MIX_INIT_MID}@*
@b{MIX_INIT_OPUS}
@end table

@noindent
Initialize by loading support as indicated by the @var{flags}, or at least return success if support is already loaded.  You may call this multiple times, which will actually require you to call @code{Mix_Quit} just once to clean up.  You may call this function with a 0 to retrieve whether support was built-in or not loaded yet.@*
@b{Note}: you can call @code{Mix_Init} with the right @b{MIX_INIT_*} flags OR'd together before you program gets busy, to prevent a later hiccup while it loads and unloads the library, and to check that you do have the support that you need before you try and use it.@*
@b{Note}: this function does @i{not} always set the error string, so do not depend on @code{Mix_GetError} being meaningful all the time.

@noindent
@b{Returns}: a bitmask of all the currently initted sample/music loaders.

@cartouche
@example
// load support for the OGG and MOD sample/music formats
int flags=MIX_INIT_OGG|MIX_INIT_MOD;
int initted=Mix_Init(flags);
if(initted&flags != flags) @{
    printf("Mix_Init: Failed to init required ogg and mod support!\n");
    printf("Mix_Init: %s\n", Mix_GetError());
    // handle error
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Quit}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Quit
@subsection Mix_Quit
@findex Mix_Quit

@noindent
@code{void @b{Mix_Quit}()}

@noindent
This function cleans up all dynamically loaded library handles, freeing memory.  If support is required again it will be initialized again, either by @code{Mix_Init} or loading a sample or some music with dynamic support required.  You may call this function when Mix_Load functions are no longer needed for the @b{MIX_INIT_}* formats.  You should call this function for each time @code{Mix_Init} was called, otherwise it may not free all the dynamic library resources until the program ends.  This is done so that multiple unrelated modules of a program may call @code{Mix_Init} and @code{Mix_Quit} without affecting the others performance and needs.

@cartouche
@example
// indicate that we are ready to unload the dynamically loaded libraries
Mix_Quit();
@end example
@end cartouche


@noindent
@b{NOTE}: Since each call to @code{Mix_Init} may set different flags, there is no way, currently, to request how many times each one was initted.  In other words, the only way to quit for sure is to do a loop like so:@*
@cartouche
@example
// force a quit
while(Mix_Init(0))
    Mix_Quit();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Init}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OpenAudio
@subsection Mix_OpenAudio
@findex Mix_OpenAudio

@noindent
@code{int @b{Mix_OpenAudio}(int @var{frequency}, Uint16 @var{format}, int @var{channels}, int @var{chunksize})}

@table @var
@item frequency
Output sampling frequency in samples per second (Hz).@*
you might use @b{MIX_DEFAULT_FREQUENCY}(44100) since that is a good value for most games.
@item format
Output sample format.@*
@item channels
Number of sound channels in output.@*
Set to 2 for stereo, 1 for mono.
This has nothing to do with mixing channels.
@item chunksize
Bytes used per output sample.
@end table

@noindent
Initialize the mixer API.@*
This must be called before using other functions in this library.@*
SDL must be initialized with @b{SDL_INIT_AUDIO} before this call.
@var{frequency} would be 44100 for 44.1KHz, which is CD audio rate.  Some games use 22050, because 44100 requires too much CPU power on very old computers.
@var{chunksize} is the size of each mixed sample.  The smaller this is the more your hooks will be called.  If make this too small on a slow system, sound may skip.  If made to large, sound effects will lag behind the action more.  You want a happy medium for your target computer.  You also may make this 4096, or larger, if you are just playing music.
@b{MIX_CHANNELS}(8) mixing channels will be allocated by default.
You may call this function multiple times, however you will have to call @code{Mix_CloseAudio} just as many times for the device to actually close.  The format will not changed on subsequent calls until fully closed.  So you will have to close all the way before trying to open with different format parameters.

@noindent
@var{format} is based on SDL audio support, see SDL_audio.h.
Here are the values listed there:@*
@table @b
@item AUDIO_U8
Unsigned 8-bit samples@*
@item AUDIO_S8
Signed 8-bit samples@*
@item AUDIO_U16LSB
Unsigned 16-bit samples, in little-endian byte order@*
@item AUDIO_S16LSB
Signed 16-bit samples, in little-endian byte order@*
@item AUDIO_U16MSB
Unsigned 16-bit samples, in big-endian byte order@*
@item AUDIO_S16MSB
Signed 16-bit samples, in big-endian byte order@*
@item AUDIO_U16
same as @b{AUDIO_U16LSB} (for backwards compatability probably)@*
@item AUDIO_S16
same as @b{AUDIO_S16LSB} (for backwards compatability probably)@*
@item AUDIO_U16SYS
Unsigned 16-bit samples, in system byte order@*
@item AUDIO_S16SYS
Signed 16-bit samples, in system byte order@*
@item AUDIO_S32LSB
Signed 32-bit samples, in little-endian byte order@*
@item AUDIO_S32MSB
Signed 32-bit samples, in bin-endian byte order@*
@item AUDIO_S32
same as @b{AUDIO_S32LSB} (for backwards compatability probably)@*
@item AUDIO_S32SYS
Signed 32-bit samples, in system byte order@*
@item AUDIO_F32LSB
Floating 32-bit samples, in little-endian byte order@*
@item AUDIO_F32MSB
Floating 32-bit samples, in big-endian byte order@*
@item AUDIO_F32
same as @b{AUDIO_F32LSB} (for backwards compatability probably)@*
@item AUDIO_F32SYS
Signed 32-bit float samples, in system byte order@*
@end table
@*
@b{MIX_DEFAULT_FORMAT} is the same as @b{AUDIO_S16SYS}.

@noindent
@b{Returns}: 0 on success, -1 on errors

@cartouche
@example
// start SDL with audio support
if(SDL_Init(SDL_INIT_AUDIO)==-1) @{
    printf("SDL_Init: %s\n", SDL_GetError());
    exit(1);
@}
// open 44.1KHz, signed 16bit, system byte order,
//      stereo audio, using 1024 byte chunks
if(Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 1024)==-1) @{
    printf("Mix_OpenAudio: %s\n", Mix_GetError());
    exit(2);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudioDevice},
@ref{Mix_CloseAudio},
@ref{Mix_PauseAudio},
@ref{Mix_QuerySpec},
@ref{Mix_AllocateChannels},
@ref{Mix_OpenAudioDevice}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OpenAudioDevice
@subsection Mix_OpenAudioDevice
@findex Mix_OpenAudioDevice

@noindent
@code{int @b{Mix_OpenAudioDevice}(int @var{frequency}, Uint16 @var{format}, int @var{channels}, int @var{chunksize}, const char* @var{device}, int @var{allowed_changes})}

@table @var
@item frequency
Output sampling frequency in samples per second (Hz).@*
you might use @b{MIX_DEFAULT_FREQUENCY}(44100) since that is a good value for most games.
@item format
Output sample format. See @ref{Mix_OpenAudio} for the table of available formats.@*
@item channels
Number of sound channels in output.@*
Set to 2 for stereo, 1 for mono.
This has nothing to do with mixing channels.
@item chunksize
Bytes used per output sample.
@item device
A UTF-8 string reported by @code{SDL_GetAudioDeviceName()} or a driver-specific name as appropriate. NULL requests the most reasonable default device.
@item allowed_changes
0, or one or more flags OR'd together.
@end table

@noindent
Initialize the mixer API.@*
This must be called before using other functions in this library.@*
SDL must be initialized with @b{SDL_INIT_AUDIO} before this call.
@var{frequency} would be 44100 for 44.1KHz, which is CD audio rate. Some games use 22050, because 44100 requires too much CPU power on very old computers.
@var{chunksize} is the size of each mixed sample.  The smaller this is the more your hooks will be called.  If make this too small on a slow system, sound may skip.  If made to large, sound effects will lag behind the action more.  You want a happy medium for your target computer.  You also may make this 4096, or larger, if you are just playing music.
@b{MIX_CHANNELS}(8) mixing channels will be allocated by default.
You may call this function multiple times, however you will have to call @code{Mix_CloseAudio} just as many times for the device to actually close.  The format will not changed on subsequent calls until fully closed.  So you will have to close all the way before trying to open with different format parameters.

@noindent
@b{Returns}: 0 on success, -1 on errors

@cartouche
@example
// start SDL with audio support
if(SDL_Init(SDL_INIT_AUDIO)==-1) @{
    printf("SDL_Init: %s\n", SDL_GetError());
    exit(1);
@}
// open 44.1KHz, signed 16bit, system byte order,
//      stereo audio, using 1024 byte chunks
if(Mix_OpenAudioDevice(44100, MIX_DEFAULT_FORMAT, 2, 1024, NULL,
                        SDL_AUDIO_ALLOW_FREQUENCY_CHANGE |
                        SDL_AUDIO_ALLOW_CHANNELS_CHANGE)==-1) @{
    printf("Mix_OpenAudioDevice: %s\n", Mix_GetError());
    exit(2);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio},
@ref{Mix_CloseAudio},
@ref{Mix_PauseAudio},
@ref{Mix_QuerySpec},
@ref{Mix_AllocateChannels},
@ref{Mix_OpenAudio}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PauseAudio
@subsection Mix_PauseAudio
@findex Mix_PauseAudio

@noindent
@code{void @b{Mix_PauseAudio}(int @var{pause_on})}

@noindent
Pauses or resume the whole audio processing: all playing music and channels will get paused synchroniously.

@table @var
@item pause_on
1 pauses the whole audio processing, 0 resumes the audio processing back.
@end table

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio},
@ref{Mix_OpenAudioDevice},
@ref{Mix_CloseAudio},
@ref{Mix_QuerySpec},
@ref{Mix_AllocateChannels},
@ref{Mix_OpenAudio}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_CloseAudio
@subsection Mix_CloseAudio
@findex Mix_CloseAudio

@noindent
@code{void @b{Mix_CloseAudio}()}

@noindent
Shutdown and cleanup the mixer API.@*
After calling this all audio is stopped, the device is closed,
and the SDL_mixer functions should not be used.
You may, of course, use Mix_OpenAudio to start the functionality again.@*
@b{Note}: This function doesn't do anything until you have called it the same
number of times that you called Mix_OpenAudio.
You may use @code{Mix_QuerySpec} to find out how many times @code{Mix_CloseAudio}
needs to be called before the device is actually closed.

@cartouche
@example
Mix_CloseAudio();
// you could SDL_Quit(); here...or not.
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio},
@ref{Mix_OpenAudioDevice},
@ref{Mix_QuerySpec},
@ref{Mix_PauseAudio},


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_InitMixer
@subsection Mix_InitMixer
@findex Mix_InitMixer

@noindent
@code{void @b{Mix_InitMixer}(const SDL_AudioSpec *@var{spec}, SDL_bool @var{skip_init_check})}

@table @var
@item spec
The audio spec such as frequency, sample format, number of channels, and desired chunk size, using the @code{SDL_AudioSpec} structure.
@item skip_init_check
Disable the internal check of the initialization state.
@end table

@noindent
Initialize the mixer API without starting the audio processing.
That means, you can make your own audio processing and manually run the mixer API
by using callbacks you may retrieve using @ref{Mix_GetGeneralMixer}, @ref{Mix_GetMusicMixer},
and @ref{Mix_GetMultiMusicMixer} calls.

@noindent
@b{CAUTION:} Don't even try to call this function and any of mixer callback
if you initialized the mixer using @ref{Mix_OpenAudio} or @ref{Mix_OpenAudioDevice} calls.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicMixer},
@ref{Mix_GetMultiMusicMixer},
@ref{Mix_GetGeneralMixer},
@ref{Mix_FreeMixer}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicMixer
@subsection Mix_GetMusicMixer
@findex Mix_GetMusicMixer

@noindent
@code{Mix_CommonMixer_t @b{Mix_GetMusicMixer}()}

@noindent
@b{Returns}: The mixer callback to process the single-stream music.

@noindent
Get the callback to process the single-stream music out of the main process of mixer API
and receive the output of currently playing single-stream music. To receive the
multi-stream music output use the @ref{Mix_GetMultiMusicMixer} callback.@*

@noindent
@b{CAUTION:} Don't even try to call the returned callback if you initialized the mixer using
@ref{Mix_OpenAudio} or @ref{Mix_OpenAudioDevice} calls.

@noindent
@b{See Also}:@*
@ref{Mix_InitMixer},
@ref{Mix_GetMultiMusicMixer},
@ref{Mix_GetGeneralMixer},
@ref{Mix_FreeMixer}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMultiMusicMixer
@subsection Mix_GetMultiMusicMixer
@findex Mix_GetMultiMusicMixer

@noindent
@code{Mix_CommonMixer_t @b{Mix_GetMultiMusicMixer}()}

@noindent
@b{Returns}: The mixer callback to process the multi-stream music.

@noindent
Get the callback to process the single-stream music out of the main process of mixer API
and receive the output of all music streams except the single-stream music. To receive the
single-stream music output use the @ref{Mix_GetMusicMixer} callback.@*

@noindent
@b{CAUTION:} Don't even try to call the returned callback if you initialized the mixer using
@ref{Mix_OpenAudio} or @ref{Mix_OpenAudioDevice} calls.


@noindent
@b{See Also}:@*
@ref{Mix_InitMixer},
@ref{Mix_GetMusicMixer},
@ref{Mix_GetGeneralMixer},
@ref{Mix_FreeMixer}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetGeneralMixer
@subsection Mix_GetGeneralMixer
@findex Mix_GetGeneralMixer

@noindent
@code{Mix_CommonMixer_t @b{Mix_GetMultiMusicMixer}()}

@noindent
@b{Returns}: The mixer callback to process the general mixer API.

@noindent
Get the callback to process the general Mixer API out of the main process of mixer API
and receive the generated output of all playing music streams and channels.@*

@noindent
@b{CAUTION 1:} Don't even try to call the returned callback if you initialized the mixer using
@ref{Mix_OpenAudio} or @ref{Mix_OpenAudioDevice} calls.

@noindent
@b{CAUTION 2:} Once you execute the callback returned by @code{Mix_GetGeneralMixer())},
callbacks returned by @code{Mix_GetMusicMixer()} and @code{Mix_GetMultiMusicMixer()} were
already processed internally. You don't need to call them at all.


@noindent
@b{See Also}:@*
@ref{Mix_InitMixer},
@ref{Mix_GetMusicMixer},
@ref{Mix_GetMultiMusicMixer},
@ref{Mix_FreeMixer}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FreeMixer
@subsection Mix_FreeMixer
@findex Mix_FreeMixer

@noindent
@code{void @b{Mix_FreeMixer}()}

@noindent
Shutdown and cleanup the mixer API.@*
Use this call in only condition you initialized the mixer API using the @ref{Mix_InitMixer} call.

@noindent
@b{CAUTION:} Don't even try to call this function and any of mixer callback
if you initialized the mixer using @ref{Mix_OpenAudio} or @ref{Mix_OpenAudioDevice} calls.

@noindent
@b{See Also}:@*
@ref{Mix_InitMixer},
@ref{Mix_GetMusicMixer},
@ref{Mix_GetMultiMusicMixer},
@ref{Mix_GetGeneralMixer}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetError
@subsection Mix_SetError
@findex Mix_SetError

@noindent
@code{void @b{Mix_SetError}(const char *@var{fmt}, ...)}

@noindent
This is the same as SDL_SetError, which sets the error string which may be fetched with Mix_GetError (or SDL_GetError).
This functions acts like printf, except that it is limited to @b{SDL_ERRBUFIZE}(1024) chars in length.  It only accepts the following format types: @code{%s, %d, %f, %p}.  No variations are supported, like @code{%.2f} would not work. For any more specifics read the SDL docs.

@cartouche
@example
int mymixfunc(int i) @{
    Mix_SetError("mymixfunc is not implemented! %d was passed in.",i);
    return(-1);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetError}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetError
@subsection Mix_GetError
@findex Mix_GetError

@noindent
@code{char *@b{Mix_GetError}()}

@noindent
This is the same as SDL_GetError, which returns the last error set as a string
which you may use to tell the user what happened when an error status has been returned
from an SDL_mixer function call.

@noindent
@b{Returns}: a char pointer (string) containing a humam readble version or the reason for the last error that occured.

@cartouche
@example
printf("Oh My Goodness, an error : %s", Mix_GetError());
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetError}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_QuerySpec
@subsection Mix_QuerySpec
@findex Mix_QuerySpec

@noindent
@code{int @b{Mix_QuerySpec}(int *@var{frequency}, Uint16 *@var{format}, int *@var{channels})}

@table @var
@item frequency
A pointer to an int where the frequency actually used by the opened audio device will be stored.
@item format
A pointer to a Uint16 where the output format actually being used by the audio device will be stored.
@item channels
A pointer to an int where the number of audio channels will be stored.@*
2 will mean stereo, 1 will mean mono.
@end table

@noindent
Get the actual audio format in use by the opened audio device.  This may or may not match the parameters you passed to @b{Mix_OpenAudio}.

@noindent
@b{Returns}: 0 on error. If the device was open the number of times it was opened will be returned.  The values of the arguments variables are not set on an error.

@cartouche
@example
// get and print the audio format in use
int numtimesopened, frequency, channels;
Uint16 format;
numtimesopened=Mix_QuerySpec(&frequency, &format, &channels);
if(!numtimesopened) @{
    printf("Mix_QuerySpec: %s\n",Mix_GetError());
@}
else @{
    char *format_str="Unknown";
    switch(format) @{
        case AUDIO_U8: format_str="U8"; break;
        case AUDIO_S8: format_str="S8"; break;
        case AUDIO_U16LSB: format_str="U16LSB"; break;
        case AUDIO_S16LSB: format_str="S16LSB"; break;
        case AUDIO_U16MSB: format_str="U16MSB"; break;
        case AUDIO_S16MSB: format_str="S16MSB"; break;
        case AUDIO_S32LSB: format_str="S32LSB"; break;
        case AUDIO_S32MSB: format_str="S32MSB"; break;
        case AUDIO_F32LSB: format_str="F32LSB"; break;
        case AUDIO_F32MSB: format_str="F32MSB"; break;
    @}
    printf("opened=%d times  frequency=%dHz  format=%s  channels=%d",
            numtimesopened, frequency, format_str, channels);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio}
