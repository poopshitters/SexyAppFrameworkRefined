@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c -----------------------------------------------------------------------------
@node Channels
@section Channels

These functions work with sound effect mixer channels.  Music is not affected by these functions.

@menu
@b{Setup}
* Mix_AllocateChannels::   Set the number of channels to mix
* Mix_Volume::             Set the mix volume of a channel
* Mix_MasterVolume::       Get/Set the general SFX volume

@b{Playing}
* Mix_PlayChannel::                 Play loop
* Mix_PlayChannelTimed::            Play loop and limit by time
* Mix_PlayChannelVol::              Play loop with seting of initial volume @b{[Mixer X]}
* Mix_PlayChannelTimedVolume::      Play loop with seting of initial volume and limit by time @b{[Mixer X]}
* Mix_FadeInChannel::               Play loop with fade in
* Mix_FadeInChannelTimed::          Play loop with fade in and limit by time
* Mix_FadeInChannelVolume::         Play loop with seting of initial volume and fade in @b{[Mixer X]}
* Mix_FadeInChannelTimedVolume::    Play loop with seting of initial volume and fade in and limit by time @b{[Mixer X]}

@b{Pausing}
* Mix_Pause::              Pause a channel
* Mix_Resume::             Resume a paused channel

@b{Stopping}
* Mix_HaltChannel::        Stop playing on a channel
* Mix_ExpireChannel::      Change the timed stoppage of a channel
* Mix_FadeOutChannel::     Stop playing channel after timed fade out
* Mix_ChannelFinished::    Set callback for when channel finishes playing

@b{Info}
* Mix_Playing::            Get the active playing status of a channel
* Mix_Paused::             Get the pause status of a channel
* Mix_FadingChannel::      Get the fade status of a channel
* Mix_GetChunk::           Get the sample playing on a channel
@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_AllocateChannels
@subsection Mix_AllocateChannels
@findex Mix_AllocateChannels

@noindent
@code{int @b{Mix_AllocateChannels}(int @var{numchans})}

@table @var
@item numchans
Number of channels to allocate for mixing.@*
A negative number will not do anything, it will tell you how many channels are currently allocated.
@end table

@noindent
Set the number of channels being mixed.  This can be called multiple times, even with sounds playing.  If @var{numchans} is less than the current number of channels, then the higher channels will be stopped, freed, and therefore not mixed any longer.  It's probably not a good idea to change the size 1000 times a second though.@*
If any channels are deallocated, any callback set by @code{Mix_ChannelFinished} will be called when each channel is halted to be freed.
@b{Note}: passing in zero WILL free all mixing channels, however music will still play.

@noindent
@b{Returns}: The number of channels allocated.  Never fails...but a high number of channels can segfault if you run out of memory.  We're talking REALLY high!

@cartouche
@example
// allocate 16 mixing channels
Mix_AllocateChannels(16);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_OpenAudio}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Volume
@subsection Mix_Volume
@findex Mix_Volume

@noindent
@code{int @b{Mix_Volume}(int @var{channel}, int @var{volume})}

@table @var
@item channel
Channel to set mix volume for.@*
@code{-1} will set the volume for all allocated channels.
@item volume
The volume to use from 0 to @b{MIX_MAX_VOLUME}(128).@*
If greater than @b{MIX_MAX_VOLUME},@* then it will be set to @b{MIX_MAX_VOLUME}.@*
If less than 0 then the volume will not be set.
@end table

@noindent
Set the volume for any allocated channel.  If @var{channel} is @code{-1} then all channels at are set at once.  The @var{volume} is applied during the final mix, along with the sample volume.  So setting this volume to 64 will halve the output of all samples played on the specified channel.  All channels default to a volume of 128, which is the max.  Newly allocated channels will have the max volume set, so setting all channels volumes does not affect subsequent channel allocations.

@noindent
@b{Returns}: current volume of the channel. If channel is -1, the average volume is returned.

@cartouche
@example
// set channel 1 to half volume
Mix_Volume(1,MIX_MAX_VOLUME/2);

// print the average volume
printf("Average volume is %d\n",Mix_Volume(-1,-1));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_VolumeChunk},
@ref{Mix_VolumeMusic},
@ref{Mix_VolumeMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_MasterVolume
@subsection Mix_MasterVolume
@findex Mix_MasterVolume

@noindent
@code{int @b{Mix_MasterVolume}(int *@var{volume})}

@noindent
Set the master volume for all channels.

@noindent
SDL_mixer keeps a per-channel volume, a per-chunk volume, and a master volume, and considers all three when mixing audio. This function sets the master volume, which is applied to all playing channels when mixing.

@noindent
The volume must be between 0 (silence) and @b{MIX_MAX_VOLUME} (full volume).
Note that @b{MIX_MAX_VOLUME} is 128. Values greater than @b{MIX_MAX_VOLUME} are clamped to @b{MIX_MAX_VOLUME}.

@noindent
Specifying a negative volume will not change the current volume; as such, this can be used to query the current volume without making changes, as this function returns the previous (in this case, still-current) value.

@noindent
@b{Note}: that the master volume does not affect any playing music; it is only applied when mixing chunks. Use @ref{Mix_VolumeMusicStream}() for that.

@table @var
@item volume
The new volume, between 0 and @b{MIX_MAX_VOLUME}, or -1 to query.
@end table

@noindent
@b{Returns}: The previous volume. If the specified volume is -1, this returns the current volume.

@noindent
@b{See Also}:@*
@ref{Mix_Volume},
@ref{Mix_VolumeChunk},
@ref{Mix_VolumeMusic},
@ref{Mix_VolumeMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayChannel
@subsection Mix_PlayChannel
@findex Mix_PlayChannel

@noindent
@code{int @b{Mix_PlayChannel}(int @var{channel}, Mix_Chunk *@var{chunk}, int @var{loops})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@end table

@noindent
Play @var{chunk} on @var{channel}, or if @var{channel} is -1, pick the first free unreserved channel.
The sample will play for @var{loops}+1 number of times, unless stopped by halt, or fade out, or setting a new expiration time of less time than it would have originally taken to play the loops, or closing the mixer.@*
@b{Note}: this just calls @code{Mix_PlayChannelTimed()} with @var{ticks} set to -1.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it exactly once through
// Mix_Chunk *sample; //previously loaded
if(Mix_PlayChannel(-1, sample, 0)==-1) @{
    printf("Mix_PlayChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannelTimed},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_HaltChannel},
@ref{Mix_ExpireChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayChannelTimed
@subsection Mix_PlayChannelTimed
@findex Mix_PlayChannelTimed

@noindent
@code{int @b{Mix_PlayChannelTimed}(int @var{channel}, Mix_Chunk *@var{chunk},
int @var{loops}, int @var{ticks})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ticks
Millisecond limit to play sample, at most.@*
If not enough @var{loops} or the sample @var{chunk} is not long enough, then the sample may stop before this timeout occurs.@*
-1 means play forever.
@end table

@noindent
If the sample is long enough and has enough loops then the sample will stop after @var{ticks} milliseconds.
Otherwise this function is the same as @ref{Mix_PlayChannel}.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it for half a second
// Mix_Chunk *sample; //previously loaded
if(Mix_PlayChannelTimed(-1, sample, -1 , 500)==-1) @{
    printf("Mix_PlayChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannel},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_FadeOutChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayChannelVol
@subsection Mix_PlayChannelVol
@findex Mix_PlayChannelVol

@noindent
@code{int @b{Mix_PlayChannelVol}(int @var{channel}, Mix_Chunk *@var{chunk}, int @var{loops}, int @var{vol})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item vol
Initial volume level between 0 and @b{MIX_MAX_VOLUME}
@end table

@noindent
Play @var{chunk} on @var{channel}, or if @var{channel} is -1, pick the first free unreserved channel.
The @var{vol} will set initial channel volume.
The sample will play for @var{loops}+1 number of times, unless stopped by halt, or fade out, or setting a new expiration time of less time than it would have originally taken to play the loops, or closing the mixer.@*
@b{Note}: this just calls @code{Mix_PlayChannelTimed()} with @var{ticks} set to -1.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it exactly once through
// Mix_Chunk *sample; //previously loaded
if(Mix_PlayChannelVol(-1, sample, 0, 56)==-1) @{
    printf("Mix_PlayChannelVol: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannel},
@ref{Mix_PlayChannelTimed},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_HaltChannel},
@ref{Mix_ExpireChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayChannelTimedVolume
@subsection Mix_PlayChannelTimedVolume
@findex Mix_PlayChannelTimedVolume

@noindent
@code{int @b{Mix_PlayChannelTimedVolume}(int @var{channel}, Mix_Chunk *@var{chunk},
int @var{loops}, int @var{ticks})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ticks
Millisecond limit to play sample, at most.@*
If not enough @var{loops} or the sample @var{chunk} is not long enough, then the sample may stop before this timeout occurs.@*
-1 means play forever.
@item vol
Initial volume level between 0 and @b{MIX_MAX_VOLUME}
@end table

@noindent
If the sample is long enough and has enough loops then the sample will stop after @var{ticks} milliseconds.
Otherwise this function is the same as @ref{Mix_PlayChannelVol}.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it for half a second
// Mix_Chunk *sample; //previously loaded
if(Mix_PlayChannelTimedVolume(-1, sample, -1 , 500, 80)==-1) @{
    printf("Mix_PlayChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannel},
@ref{Mix_PlayChannelVol},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_FadeOutChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInChannel
@subsection Mix_FadeInChannel
@findex Mix_FadeInChannel

@noindent
@code{int @b{Mix_FadeInChannel}(int @var{channel}, Mix_Chunk *@var{chunk},
int @var{loops}, int @var{ms})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ms
Milliseconds of time that the fade-in effect should take to go from silence to full volume.
@end table

@noindent
Play @var{chunk} on @var{channel}, or if @var{channel} is -1, pick the first free unreserved channel.@*
The channel volume starts at 0 and fades up to full volume over @var{ms} milliseconds of time.  The sample may end before the fade-in is complete if it is too short or doesn't have enough loops.
The sample will play for @var{loops}+1 number of times, unless stopped by halt, or fade out, or setting a new expiration time of less time than it would have originally taken to play the loops, or closing the mixer.@*
@b{Note}: this just calls @code{Mix_FadeInChannelTimed()} with @var{ticks} set to -1.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it exactly 3 times through
// fade in over one second
// Mix_Chunk *sample; //previously loaded
if(Mix_FadeInChannel(-1, sample, 2, 1000)==-1) @{
    printf("Mix_FadeInChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannel},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_FadingChannel},
@ref{Mix_FadeOutChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInChannelTimed
@subsection Mix_FadeInChannelTimed
@findex Mix_FadeInChannelTimed

@example
int @b{Mix_FadeInChannelTimed}(int @var{channel}, Mix_Chunk *@var{chunk},
                           int @var{loops}, int @var{ms}, int @var{ticks})
@end example

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ms
Milliseconds of time that the fade-in effect should take to go from silence to full volume.
@item ticks
Millisecond limit to play sample, at most.@*
If not enough @var{loops} or the sample @var{chunk} is not long enough, then the sample may stop before this timeout occurs.@*
-1 means play forever.
@end table

@noindent
If the sample is long enough and has enough loops then the sample will stop after @var{ticks} milliseconds.
Otherwise this function is the same as @ref{Mix_FadeInChannel}.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it for half a second
// Mix_Chunk *sample; //previously loaded
if(Mix_PlayChannelTimed(-1, sample, -1 , 500)==-1) @{
    printf("Mix_PlayChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannelTimed},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_FadingChannel},
@ref{Mix_HaltChannel},
@ref{Mix_ExpireChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInChannelVolume
@subsection Mix_FadeInChannelVolume
@findex Mix_FadeInChannelVolume

@noindent
@code{int @b{Mix_FadeInChannelVolume}(int @var{channel}, Mix_Chunk *@var{chunk},
int @var{loops}, int @var{ms}, int @var{vol})}

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ms
Milliseconds of time that the fade-in effect should take to go from silence to full volume.
@item vol
Initial volume level between 0 and @b{MIX_MAX_VOLUME}
@end table

@noindent
Play @var{chunk} on @var{channel}, or if @var{channel} is -1, pick the first free unreserved channel.@*
The channel volume starts at 0 and fades up to full volume over @var{ms} milliseconds of time.  The sample may end before the fade-in is complete if it is too short or doesn't have enough loops.
The sample will play for @var{loops}+1 number of times, unless stopped by halt, or fade out, or setting a new expiration time of less time than it would have originally taken to play the loops, or closing the mixer.@*
The @var{vol} will set initial channel volume.
@b{Note}: this just calls @code{Mix_FadeInChannelTimed()} with @var{ticks} set to -1.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it exactly 3 times through
// fade in over one second
// Mix_Chunk *sample; //previously loaded
if(Mix_FadeInChannelVolume(-1, sample, 2, 1000, 70)==-1) @{
    printf("Mix_FadeInChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannel},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelTimedVolume},
@ref{Mix_FadingChannel},
@ref{Mix_FadeOutChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInChannelTimedVolume
@subsection Mix_FadeInChannelTimedVolume
@findex Mix_FadeInChannelTimedVolume

@example
int @b{Mix_FadeInChannelTimedVolume}(int @var{channel}, Mix_Chunk *@var{chunk},
                           int @var{loops}, int @var{ms}, int @var{ticks}, int @var{vol})
@end example

@table @var
@item channel
Channel to play on, or -1 for the first free unreserved channel.
@item chunk
Sample to play.
@item loops
Number of loops, -1 is infinite loops.@*
Passing one here plays the sample twice (1 loop).
@item ms
Milliseconds of time that the fade-in effect should take to go from silence to full volume.
@item ticks
Millisecond limit to play sample, at most.@*
If not enough @var{loops} or the sample @var{chunk} is not long enough, then the sample may stop before this timeout occurs.@*
-1 means play forever.
@item vol
Initial volume level between 0 and @b{MIX_MAX_VOLUME}
@end table

@noindent
If the sample is long enough and has enough loops then the sample will stop after @var{ticks} milliseconds.
Otherwise this function is the same as @ref{Mix_FadeInChannelVolume}.

@noindent
@b{Returns}: the channel the sample is played on.  On any errors, -1 is returned.

@cartouche
@example
// play sample on first free unreserved channel
// play it for half a second
// Mix_Chunk *sample; //previously loaded
if(Mix_FadeInChannelTimedVolume(-1, sample, -1 , 500, 78)==-1) @{
    printf("Mix_PlayChannel: %s\n",Mix_GetError());
    // may be critical error, or maybe just no channels were free.
    // you could allocated another channel in that case...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayChannelTimed},
@ref{Mix_PlayChannelVol},
@ref{Mix_PlayChannelTimedVolume},
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeInChannelVolume},
@ref{Mix_FadingChannel},
@ref{Mix_HaltChannel},
@ref{Mix_ExpireChannel},
@ref{Mix_ReserveChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Pause
@subsection Mix_Pause
@findex Mix_Pause

@noindent
@code{void @b{Mix_Pause}(int @var{channel})}

@table @var
@item channel
Channel to pause on, or -1 for all channels.
@end table

@noindent
Pause @var{channel}, or all playing channels if -1 is passed in.  You may still halt a paused channel.@*
@b{Note}: Only channels which are actively playing will be paused.

@cartouche
@example
// pause all sample playback
Mix_Pause(-1);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Resume},
@ref{Mix_Paused},
@ref{Mix_HaltChannel}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Resume
@subsection Mix_Resume
@findex Mix_Resume

@noindent
@code{void @b{Mix_Resume}(int @var{channel})}

@table @var
@item channel
Channel to resume playing, or -1 for all channels.
@end table

@noindent
Unpause @var{channel}, or all playing and paused channels if -1 is passed in.

@cartouche
@example
// resume playback on all previously active channels
Mix_Resume(-1);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Pause},
@ref{Mix_Paused}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HaltChannel
@subsection Mix_HaltChannel
@findex Mix_HaltChannel

@noindent
@code{int @b{Mix_HaltChannel}(int @var{channel})}

@table @var
@item channel
Channel to stop playing, or -1 for all channels.
@end table

@noindent
Halt @var{channel} playback, or all channels if -1 is passed in.@*
Any callback set by @code{Mix_ChannelFinished} will be called.

@noindent
@b{Returns}: always returns zero. (kinda silly)

@cartouche
@example
// halt playback on all channels
Mix_HaltChannel(-1);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_ExpireChannel},
@ref{Mix_FadeOutChannel},
@ref{Mix_ChannelFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ExpireChannel
@subsection Mix_ExpireChannel
@findex Mix_ExpireChannel

@noindent
@code{int @b{Mix_ExpireChannel}(int @var{channel}, int @var{ticks})}

@table @var
@item channel
Channel to stop playing, or -1 for all channels.
@item ticks
Millisecons until channel(s) halt playback.
@end table

@noindent
Halt @var{channel} playback, or all channels if -1 is passed in, after @var{ticks} milliseconds.
Any callback set by @code{Mix_ChannelFinished} will be called when the channel expires.

@noindent
@b{Returns}: Number of channels set to expire.  Whether or not they are active.

@cartouche
@example
// halt playback on all channels in 2 seconds
Mix_ExpireChannel(-1, 2000);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltChannel},
@ref{Mix_FadeOutChannel},
@ref{Mix_ChannelFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeOutChannel
@subsection Mix_FadeOutChannel
@findex Mix_FadeOutChannel

@noindent
@code{int @b{Mix_FadeOutChannel}(int @var{channel}, int @var{ms})}

@table @var
@item channel
Channel to fade out, or -1 to fade all channels out.
@item ms
Milliseconds of time that the fade-out effect should take to go to silence, starting now.
@end table

@noindent
Gradually fade out @var{which} channel over @var{ms} milliseconds starting from now.
The channel will be halted after the fade out is completed.  Only channels that are playing are set to fade out, including paused channels.
Any callback set by @code{Mix_ChannelFinished} will be called when the channel finishes fading out.

@noindent
@b{Returns}: The number of channels set to fade out.

@cartouche
@example
// fade out all channels to finish 3 seconds from now
printf("starting fade out of %d channels\n", Mix_FadeOutChannel(-1, 3000));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadingChannel},
@ref{Mix_ChannelFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ChannelFinished
@subsection Mix_ChannelFinished
@findex Mix_ChannelFinished

@noindent
@code{void @b{Mix_ChannelFinished}(void (*@var{channel_finished})(int channel))}

@table @var
@item channel_finished
Function to call when any channel finishes playback.
@end table

@noindent
When @var{channel} playback is halted, then the specified @var{channel_finished} function is called.  The @code{channel} parameter will contain the channel number that has finished.@*
@b{NOTE}: NEVER call SDL_Mixer functions, nor @code{SDL_LockAudio}, from a callback function.

@cartouche
@example
// a simple channel_finished function
void channelDone(int channel) @{
    printf("channel %d finished playback.\n",channel);
@}
@end example
@end cartouche

@cartouche
@example
// make a channelDone function
void channelDone(int channel)
@{
    printf("channel %d finished playing.\n", channel);
@}
...
// set the callback for when a channel stops playing
Mix_ChannelFinished(channelDone);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltChannel},
@ref{Mix_ExpireChannel}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Playing
@subsection Mix_Playing
@findex Mix_Playing

@noindent
@code{int @b{Mix_Playing}(int @var{channel})}

@table @var
@item channel
Channel to test whether it is playing or not.@*
-1 will tell you how many channels are playing.
@end table

@noindent
Tells you if @var{channel} is playing, or not.@*
@b{Note}: Does not check if the channel has been paused.

@noindent
@b{Returns}: Zero if the channel is not playing.  Otherwise if you passed in -1, the number of channels playing is returned.  If you passed in a specific channel, then 1 is returned if it is playing.

@cartouche
@example
// check how many channels are playing samples
printf("%d channels are playing\n", Mix_Playing(-1));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Paused},
@ref{Mix_Fading},
@ref{Mix_PlayChannel},
@ref{Mix_Pause},

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_Paused
@subsection Mix_Paused
@findex Mix_Paused

@noindent
@code{int @b{Mix_Paused}(int @var{channel})}

@table @var
@item channel
Channel to test whether it is paused or not.@*
-1 will tell you how many channels are paused.
@end table

@noindent
Tells you if @var{channel} is paused, or not.@*
@b{Note}: Does not check if the channel has been halted after it was paused, which may seem a little weird.

@noindent
@b{Returns}: Zero if the channel is not paused.  Otherwise if you passed in -1, the number of paused channels is returned.  If you passed in a specific channel, then 1 is returned if it is paused.

@cartouche
@example
// check the pause status on all channels
printf("%d channels are paused\n", Mix_Paused(-1));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Playing},
@ref{Mix_Pause},
@ref{Mix_Resume}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadingChannel
@subsection Mix_FadingChannel
@findex Mix_FadingChannel

@noindent
@code{Mix_Fading @b{Mix_FadingChannel}(int @var{which})}

@table @var
@item which
Channel to get the fade activity status from.@*
-1 is not valid, and will probably crash the program.
@end table

@noindent
Tells you if @var{which} channel is fading in, out, or not.  Does not tell you if the channel is playing anything, or paused, so you'd need to test that separately.

@noindent
@b{Returns}: the fading status.  Never returns an error.

@cartouche
@example
// check the fade status on channel 0
switch(Mix_FadingChannel(0)) @{
    case MIX_NO_FADING:
        printf("Not fading.\n");
        break;
    case MIX_FADING_OUT:
        printf("Fading out.\n");
        break;
    case MIX_FADING_IN:
        printf("Fading in.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Fading},
@ref{Mix_Playing},
@ref{Mix_Paused},
@ref{Mix_FadeInChannel},
@ref{Mix_FadeInChannelTimed},
@ref{Mix_FadeOutChannel}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetChunk
@subsection Mix_GetChunk
@findex Mix_GetChunk

@noindent
@code{Mix_Chunk *@b{Mix_GetChunk}(int @var{channel})}

@table @var
@item channel
Channel to get the current Mix_Chunk playing.@*
-1 is not valid, but will not crash the program.
@end table

@noindent
Get the most recent sample chunk pointer played on @var{channel}.  This pointer may be currently playing, or just the last used.@*
@b{Note}: The actual chunk may have been freed, so this pointer may not be valid anymore.

@noindent
@b{Returns}: Pointer to the Mix_Chunk.  NULL is returned if the channel is not allocated, or if the channel has not played any samples yet.

@cartouche
@example
// get the last chunk used by channel 0
printf("Mix_Chunk* last in use on channel 0 was: %08p\n", Mix_GetChunk(0));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Chunk},
@ref{Mix_Playing}
