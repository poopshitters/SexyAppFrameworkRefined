@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c -----------------------------------------------------------------------------
@node Music
@section Music

These functions work with music.  Music is not played on a normal mixer channel.
Music is therefore manipulated separately, except in post-processing hooks.@*
@*
There are two different music sub-systems provided:@*
- @b{single-music}: the old API of the SDL_mixer. The most of given calls don't even has the @ref{Mix_Music} argument and intended to manipulate the currently playing music.@*
- @b{multi-music}: the new API of the MixerX. Every given call intended to work with the multi-music has the @ref{Mix_Music} argument to manipulate every music individually as they are able to work in parallel.

@menu
@b{Loading}
* Mix_GetNumMusicDecoders::  Number of music format types that can be decoded
* Mix_GetMusicDecoder::      Name of enumerated music format type decoder
* Mix_HasMusicDecoder::      Check if the specific music decoder is abailable by name in this build
* Mix_LoadMUS::              Load a music file into a Mix_Music
* Mix_LoadMUS_RW::           Load Music through SDL RWops
* Mix_LoadMUS_RW_ARG::       Load music through SDL RWops with passing of extra arguments string @b{[Mixer X]}
* Mix_LoadMUS_RW_GME::       Load music through SDL RWops with passing of GME track number @b{[Mixer X]}
* Mix_LoadMUSType_RW::       Load a music file from an SDL RWops object assuming a specific format
* Mix_LoadMUSType_RW_ARG::   Load a music file from an SDL RWops object assuming a specific format with passing of extra @ref{Music Arguments} string @b{[Mixer X]}

@b{Free}
* Mix_FreeMusic::            Free a Mix_Music
* Mix_SetFreeOnStop::        Mark a Mix_Music to be free automatically when it get halted. @b{[Mixer X]}

@b{Playing}
* Mix_PlayMusicStream::         Play music, with looping @b{[Mixer X]}
* Mix_FadeInMusicStream::       Play music, with looping, and fade in @b{[Mixer X]}
* Mix_FadeInMusicStreamPos::    Play music from a start point, with looping, and fade in @b{[Mixer X]}
* Mix_CrossFadeMusicStream::    Cross-fade from old music into new (fade-out old and fade-in a new at the same time) @b{[Mixer X]}
* Mix_CrossFadeMusicStreamPos:: Cross-fade from old music into new from a start point (fade-out old and fade-in a new at the same time) @b{[Mixer X]}
* Mix_HookMusic::               Hook for a custom music player

@b{Playing (legacy single-stream)}
* Mix_PlayMusic::            Play single-stream music, with looping
* Mix_FadeInMusic::          Play single-stream music, with looping, and fade in
* Mix_FadeInMusicPos::       Play single-stream music from a start point, with looping, and fade in

@b{Settings}
* Mix_VolumeMusicStream::           Set the individual music volume @b{[Mixer X]}
* Mix_GetMusicVolume::              Get the individual music volume @b{[Mixer 2.0]}
* Mix_GetVolumeMusicStream::        Get the individual music volume, alias to @b{Mix_GetMusicVolume} @b{[Mixer X]}
* Mix_VolumeMusicGeneral::          Set the general music volume @b{[Mixer X]}
* Mix_GetVolumeMusicGeneral::       Get the general music volume @b{[Mixer X]}
* Mix_PauseMusicStream::            Pause music @b{[Mixer X]}
* Mix_PauseMusicStreamAll::         Pause all music (except the single-stream music) @b{[Mixer X]}
* Mix_ResumeMusicStream::           Resume music @b{[Mixer X]}
* Mix_ResumeMusicStreamAll::        Resume all music (except the single-stream music) @b{[Mixer X]}
* Mix_RewindMusicStream::           Rewind music to beginning @b{[Mixer X]}
* Mix_SetMusicPositionStream::      Set position of playback in music @b{[Mixer X]}
* Mix_GetMusicPosition::            Get the time current position of music stream @b{[Mixer X]}
* Mix_ModMusicStreamJumpToOrder::   Jump to a given order in mod music. Only for MOD music formats. @b{[Mixer X]}
* Mix_StartTrack::                  Select a song contained in the music file to play.
* Mix_GetNumTracks::                Get count of the songs contained inside a music file.
* Mix_MusicDuration::               Get the total time length of music stream @b{[Mixer X]}
* Mix_GetMusicLoopStartTime::       Get the loop start time position of music stream @b{[Mixer X]}
* Mix_GetMusicLoopEndTime::         Get the loop end time position of music stream @b{[Mixer X]}
* Mix_GetMusicLoopLengthTime::      Get the loop time length of music stream @b{[Mixer X]}
* Mix_SetMusicTempo::               Set the music tempo factor @b{[Mixer X]}
* Mix_GetMusicTempo::               Get the music tempo @b{[Mixer X]}
* Mix_SetMusicSpeed::               Set the music tempo factor @b{[Mixer X]}
* Mix_GetMusicSpeed::               Get the music tempo @b{[Mixer X]}
* Mix_SetMusicPitch::               Set the music tempo factor @b{[Mixer X]}
* Mix_GetMusicPitch::               Get the music tempo @b{[Mixer X]}
* Mix_GetMusicTracks::              Get the number of tracks (or channels) at the MIDI/Tracker/Chiptune music @b{[Mixer X]}
* Mix_SetMusicTrackMute::           Mute or unmute the given track (or channel) at the MIDI/Tracker/Chiptune music @b{[Mixer X]}
* Mix_SetMusicCMD::                 Use external program for music playback
* Mix_GetSynchroValue::             @b{makes no effect yet.} Get the module music synchro value @b{[Mixer 2.0]}
* Mix_SetSynchroValue::             @b{makes no effect yet.} Set the synchro value for module music @b{[Mixer 2.0]}
* Mix_SetMusicFileName::            Change the reporting filename tag of a music @b{[Mixer X]}
@c Mix_SetSynchroValue::          seems useless! (return -1;)

@b{Settings (legacy single-stream)}
* Mix_VolumeMusic::                 Set single-stream music volume
* Mix_PauseMusic::                  Pause single-stream music
* Mix_ResumeMusic::                 Resume paused single-stream music
* Mix_RewindMusic::                 Rewind single-stream music to beginning
* Mix_SetMusicPosition::            Set position of playback in stream
* Mix_ModMusicJumpToOrder::         Jump to a given order in mod single-stream music. Only for MOD music formats. @b{[Mixer 2.0]}

@b{MIDI settings}
* Mix_GetMidiPlayer::        Get type of MIDI player library currently in use @b{[Mixer X]}
* Mix_GetNextMidiPlayer::    Get type of MIDI player library prepared for next opening of MIDI file @b{[Mixer X]}
* Mix_SetMidiPlayer::        Set a MIDI player library to play MIDI music @b{[Mixer X]}
* Mix_SetLockMIDIArgs::      Enable ignoring of MIDI arguments and locking of current MIDI setup @b{[Mixer X]}

@b{Stopping}
* Mix_HaltMusicStream::             Stop music playback @b{[Mixer X]}
* Mix_FadeOutMusicStream::          Stop music, with fade out @b{[Mixer X]}
* Mix_HookMusicStreamFinished::     Set a callback for when exact music stops @b{[Mixer X]}
* Mix_HookMusicStreamFinishedAny::  Set a callback for when any music stops @b{[Mixer X]}

@b{Stopping (legacy single-stream)}
* Mix_HaltMusic::            Stop single-stream music playback
* Mix_FadeOutMusic::         Stop single-stream music, with fade out
* Mix_HookMusicFinished::    Set a callback for when single-stream music stops

@b{Info}
* Mix_GetMusicType::         Get the music encoding type
* Mix_PlayingMusicStream::   Test whether music is playing @b{[Mixer X]}
* Mix_PausedMusicStream::    Test whether music is paused @b{[Mixer X]}
* Mix_FadingMusicStream::    Get status of current music fade activity @b{[Mixer X]}
* Mix_GetMusicHookData::     Retrieve the Mix_HookMusic @var{arg}

@b{Info (legacy single-stream)}
* Mix_PlayingMusic::         Test whether single-stream music is playing
* Mix_PausedMusic::          Test whether single-stream music is paused
* Mix_FadingMusic::          Get status of current single-stream music fade activity
@c Mix_GetSynchroValue::      seems useless! (return -1;)

@b{Meta-Tags}
* Mix_GetMusicTitle::        Retrieve the title meta-tag of currently playing @var{music} @b{[Mixer X]}
* Mix_GetMusicTitleTag::     Retrieve the title meta-tag of currently playing @var{music} @b{[Mixer X]}
* Mix_GetMusicArtistTag::    Retrieve the artist meta-tag of currently playing @var{music} @b{[Mixer X]}
* Mix_GetMusicAlbumTag::     Retrieve the album meta-tag of currently playing @var{music} @b{[Mixer X]}
* Mix_GetMusicCopyrightTag:: Retrieve the copyright meta-tag of currently playing @var{music} @b{[Mixer X]}

@b{Timidity Extra Settings}
* Mix_SetTimidityCfg::       Set the custom Timidity config path @b{[Mixer X]}
* Mix_GetTimidityCfg::       Get the current Timidity config path @b{[Mixer X]}

@b{Game Music EMU Extra Settings}
* Mix_GME_SetSpcEchoDisabled::     Set the "SPC echo disabled" playing parameter @b{[Mixer X]}
* Mix_GME_GetSpcEchoDisabled::     Get the current value of the "SPC echo disabled" playing parameter @b{[Mixer X]}

@b{FluidSynth Extra Settings}
* Mix_SetSoundFonts::        Set global SoundFonts paths to use by supported FluidSynth MIDI backend @b{[Mixer 2.0]}
* Mix_GetSoundFonts::        Get global SoundFonts paths to use by supported FluidSynth MIDI backend @b{[Mixer 2.0]}
* Mix_EachSoundFont::        Iterate global SoundFonts paths to use by supported FluidSynth MIDI backend @b{[Mixer 2.0]}
* Mix_EachSoundFontEx::      Iterate global SoundFonts paths and additionally with given custom paths to use by supported FluidSynth MIDI backend @b{[Mixer X]}

@b{libADLMIDI Extra Settings}
* Mix_ADLMIDI_getTotalBanks::               Get total count of available embedded banks @b{[Mixer X]}
* Mix_ADLMIDI_getBankNames::                Get array of embedded bank titles @b{[Mixer X]}
* Mix_ADLMIDI_getBankID::                   Get ID of currently set bank @b{[Mixer X]}
* Mix_ADLMIDI_setBankID::                   Change current bank. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_getTremolo::                  Get current state of "Deep Tremolo" OPL3 flag @b{[Mixer X]}
* Mix_ADLMIDI_setTremolo::                  Set state of "Deep Tremolo" OPL3 flag. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_getVibrato::                  Get current state of "Deep Vibrato" OPL3 flag @b{[Mixer X]}
* Mix_ADLMIDI_setVibrato::                  Set state of "Deep Vibrato" OPL3 flag. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_getScaleMod::                 Get current state of "Scalable modulation mode" flag @b{[Mixer X]}
* Mix_ADLMIDI_setScaleMod::                 Turn on/off scalable modulation mode flag. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_getVolumeModel::              Get ID of current volumes model @b{[Mixer X]}
* Mix_ADLMIDI_setVolumeModel::              Change current volume model. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_getFullRangeBrightness::      Get full range mode for CC74-Brightness controller @b{[Mixer X]}
* Mix_ADLMIDI_setFullRangeBrightness::      Set full range mode for CC74-Brightness controller @b{[Mixer X]}
* Mix_ADLMIDI_getAutoArpeggio::             Get the automatic arpeggio enable/disable setting state @b{[Mixer X]}
* Mix_ADLMIDI_setAutoArpeggio::             Get the automatic arpeggio enable/disable setting state @b{[Mixer X]}
* Mix_ADLMIDI_getFullPanStereo::            Get full panning stereo mode @b{[Mixer X]}
* Mix_ADLMIDI_setFullPanStereo::            Set full panning stereo mode @b{[Mixer X]}
* Mix_ADLMIDI_getEmulator::                 Get the OPL3 Emulator for ADLMIDI @b{[Mixer X]}
* Mix_ADLMIDI_setEmulator::                 Select the OPL3 Emulator for ADLMIDI @b{[Mixer X]}
* Mix_ADLMIDI_getChipsCount::               Get the number of parallel emulated OPL3 chips to get the available polyphony range @b{[Mixer X]}
* Mix_ADLMIDI_setChipsCount::               Set the number of parallel emulated OPL3 chips to define the available polyphony range @b{[Mixer X]}
* Mix_ADLMIDI_setSetDefaults::              Reset ADLMIDI settings to default state. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_ADLMIDI_setCustomBankFile::           Path to custom WOPL bank file. Applying on MIDI file reopen. @b{[Mixer X]}

@b{libOPNMIDI Extra Settings}
* Mix_OPNMIDI_getVolumeModel::              Get ID of current volumes model @b{[Mixer X]}
* Mix_OPNMIDI_setVolumeModel::              Change current volume model. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_OPNMIDI_getFullRangeBrightness::      Get full range mode for CC74-Brightness controller @b{[Mixer X]}
* Mix_OPNMIDI_setFullRangeBrightness::      Set full range mode for CC74-Brightness controller @b{[Mixer X]}
* Mix_OPNMIDI_getAutoArpeggio::             Get the automatic arpeggio enable/disable setting state @b{[Mixer X]}
* Mix_OPNMIDI_setAutoArpeggio::             Get the automatic arpeggio enable/disable setting state @b{[Mixer X]}
* Mix_OPNMIDI_getFullPanStereo::            Get full panning stereo mode @b{[Mixer X]}
* Mix_OPNMIDI_setFullPanStereo::            Set full panning stereo mode @b{[Mixer X]}
* Mix_OPNMIDI_getEmulator::                 Get the OPN2/OPNA Emulator for OPNMIDI @b{[Mixer X]}
* Mix_OPNMIDI_setEmulator::                 Select the OPN2/OPNA Emulator for OPNMIDI @b{[Mixer X]}
* Mix_OPNMIDI_getChipsCount::               Get the number of parallel emulated OPN2/OPNA chips to get the available polyphony range @b{[Mixer X]}
* Mix_OPNMIDI_setChipsCount::               Set the number of parallel emulated OPN2/OPNA chips to define the available polyphony range @b{[Mixer X]}
* Mix_OPNMIDI_setSetDefaults::              Reset OPNMIDI settings to default state. Applying on MIDI file reopen. @b{[Mixer X]}
* Mix_OPNMIDI_setCustomBankFile::           Path to custom WOPN bank file. Applying on MIDI file reopen. @b{[Mixer X]}

@b{Extra}
* Music Arguments::                         The special arguments string that can be passed together with the music file path to set up individual music settings.@b{[Mixer X]}

@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetNumMusicDecoders
@subsection Mix_GetNumMusicDecoders
@findex Mix_GetNumMusicDecoders

@noindent
@code{int @b{Mix_GetNumMusicDecoders}()}

@noindent
Get the number of music decoders available from the @code{Mix_GetMusicDecoder} function.  This number can be different for each run of a program, due to the change in availability of shared libraries that support each format.

@noindent
@b{Returns}: The number of music decoders available.

@cartouche
@example
// print the number of music decoders available
printf("There are %d music deocoders available\n", Mix_GetNumMusicDecoders());
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetNumChunkDecoders},
@ref{Mix_GetMusicDecoder},
@ref{Mix_LoadMUS}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicDecoder
@subsection Mix_GetMusicDecoder
@findex Mix_GetMusicDecoder

@noindent
@code{const char *@b{Mix_GetMusicDecoder}(int @var{index})}

@table @var
@item index
The index number of music decoder to get.@*
In the range from 0(zero) to Mix_GetNumMusicDecoders()-1, inclusive.
@end table

@noindent
Get the name of the @var{index}ed music decoder.
You need to get the number of music decoders available using the @code{Mix_GetNumMusicDecoders} function.

@noindent
@b{Returns}: The name of the @var{index}ed music decoder.  This string is owned by the SDL_mixer library, do not modify or free it.  It is valid until you call @code{Mix_CloseAudio} the final time.

@cartouche
@example
// print music decoders available
int i,max=Mix_GetNumMusicDecoders();
for(i=0; i<max; ++i)
	printf("Music decoder %d is for %s",Mix_GetMusicDecoder(i));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetNumMusicDecoders},
@ref{Mix_GetChunkDecoder},
@ref{Mix_LoadWAV}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HasMusicDecoder
@subsection Mix_HasMusicDecoder
@findex Mix_HasMusicDecoder

@noindent
@code{SDL_bool @b{Mix_HasMusicDecoder}(const char *@var{name})}

@table @var
@item name
The decoder name to check it's presence.
@end table

@noindent
Check if the music decoder named as @var{name} presented in this library build.

@noindent
@b{Returns}: @code{SDL_TRUE} if the requested codec name is available in this library build or @code{SDL_FALSE} if not.

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUS
@subsection Mix_LoadMUS
@findex Mix_LoadMUS

@noindent
@code{Mix_Music *@b{Mix_LoadMUS}(const char *@var{file})}

@table @var
@item file
Name of music file to use. You may add the @ref{Music Arguments} after the filepath using the @b{|} symbol as the separator.
@end table

@noindent
Load music file to use.  This can load WAVE, MOD, MIDI, OGG, MP3, FLAC, and any file that you use a command to play with.@*
If you are using an external command to play the music, you must call @code{Mix_SetMusicCMD} before this, otherwise the internal players will be used.  Alternatively, if you have set an external command up and don't want to use it, you must call @code{Mix_SetMusicCMD(NULL)} to use the built-in players again.

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
// load the MP3 file "music.mp3" to play as music
Mix_Music *music;
music=Mix_LoadMUS("music.mp3");
if(!music) @{
    printf("Mix_LoadMUS(\"music.mp3\"): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example

@example
// load the MIDI file "music.mid" to play as music
// and add the Music Arguments string "s3;c2;" into it
Mix_Music *music;
music=Mix_LoadMUS("music.mid|s3;c2;");
if(!music) @{
    printf("Mix_LoadMUS(\"music.mid|s3;c2;\"): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUS_RW
@subsection Mix_LoadMUS_RW
@findex Mix_LoadMUS_RW

@noindent
@code{Mix_Music *@b{Mix_LoadMUS_RW}(SDL_RWops *@var{src}, int @var{freesrc})}

@table @var
@item src
SDL RWops instance of music file / memory
@item freesrc
Automatically close SDL_RWops instance on complete loading of music
@end table

@noindent
Load a music file from an SDL_RWop object

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
SDL_RWops *file = SDL_RWopen("music.mp3", "rb");
// load the MP3 file "music.mp3" to play as music
Mix_Music *music;
music = Mix_LoadMUS_RW(file, 0);
if(!music) @{
    printf("Mix_LoadMUS_RW(file, 0): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_LoadMUS_RW_ARG},
@ref{Mix_LoadMUS_RW_GME},
@ref{Mix_LoadMUSType_RW},
@ref{Mix_LoadMUSType_RW_ARG},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUS_RW_ARG
@subsection Mix_LoadMUS_RW_ARG
@findex Mix_LoadMUS_RW_ARG

@noindent
@code{Mix_Music *@b{Mix_LoadMUS_RW_ARG}(SDL_RWops *@var{src}, int @var{freesrc}, const char *@var{args})}

@table @var
@item src
SDL RWops instance of music file / memory
@item freesrc
Automatically close SDL_RWops instance on complete loading of music
@item args
The @ref{Music Arguments} string supported by specific library
@end table

@noindent
Load a music file from an SDL_RWop object with custom arguments

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
// load the MIDI file "music.mid" to play as music with ADLMIDI synthesizer
Mix_Music *music;
SDL_RWops *file = SDL_RWopen("music.mid", "rb");
music = Mix_LoadMUS_RW_ARG(file, 1, "s0;t1;v1;b68;");
if(!music) @{
    printf("Mix_LoadMUS_RW_ARG(file, 1, \"s0;t1;v1;b68;\"): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_LoadMUS_RW},
@ref{Mix_LoadMUS_RW_GME},
@ref{Mix_LoadMUSType_RW},
@ref{Mix_LoadMUSType_RW_ARG},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUS_RW_GME
@subsection Mix_LoadMUS_RW_GME
@findex Mix_LoadMUS_RW_GME

@noindent
@code{Mix_Music *@b{Mix_LoadMUS_RW_GME}(SDL_RWops *@var{src}, int @var{freesrc}, int @var{trackID})}

@table @var
@item src
SDL RWops instance of music file / memory
@item freesrc
Automatically close SDL_RWops instance on complete loading of music
@item trackID
ID of GME file track
@end table

@noindent
Load music file to use.

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
// load the PC Engine chiptune file "music.hes" to play as music with GME library
Mix_Music *music;
SDL_RWops *file = SDL_RWopen("music.hes", "rb");
music = Mix_LoadMUS_RW_GME(file, 1, 4);
if(!music) @{
    printf("Mix_LoadMUS_RW_GME(file, 1, 4): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_LoadMUS_RW},
@ref{Mix_LoadMUS_RW_ARG},
@ref{Mix_LoadMUSType_RW},
@ref{Mix_LoadMUSType_RW_ARG},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUSType_RW
@subsection Mix_LoadMUSType_RW
@findex Mix_LoadMUSType_RW

@noindent
@code{Mix_Music *@b{Mix_LoadMUSType_RW}(SDL_RWops *@var{src}, Mix_MusicType @var{type}, int @var{freesrc})}

@table @var
@item src
SDL RWops instance of music file / memory
@item type
A music type identificator
@item freesrc
Automatically close SDL_RWops instance on complete loading of music
@end table

@noindent
Load a music file from an SDL_RWop object assuming a specific format

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
// load the MIDI file "music.mid" to play as music with ADLMIDI synthesizer
Mix_Music *music;
SDL_RWops *file = SDL_RWopen("music.mid", "rb");
music = Mix_LoadMUSType_RW(file, MUS_MID, 1);
if(!music) @{
    printf("Mix_LoadMUSType_RW(file, MUS_MID, 1): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_LoadMUS_RW},
@ref{Mix_LoadMUS_RW_GME},
@ref{Mix_LoadMUSType_RW_ARG},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_LoadMUSType_RW_ARG
@subsection Mix_LoadMUSType_RW_ARG
@findex Mix_LoadMUSType_RW_ARG

@noindent
@code{Mix_Music *@b{Mix_LoadMUSType_RW_ARG}(SDL_RWops *@var{src}, Mix_MusicType @var{type}, int @var{freesrc})}

@table @var
@item src
SDL RWops instance of music file / memory
@item type
A music type identificator
@item freesrc
Automatically close SDL_RWops instance on complete loading of music
@item args
The @ref{Music Arguments} string supported by specific library
@end table

@noindent
Load a music file from an SDL_RWop object assuming a specific format with custom arguments (trackID for GME or settings for a MIDI playing)

@noindent
@b{Returns}: A pointer to a Mix_Music.  NULL is returned on errors.

@cartouche
@example
// load the MIDI file "music.mid" to play as music with ADLMIDI synthesizer
Mix_Music *music;
SDL_RWops *file = SDL_RWopen("music.mid", "rb");
music = Mix_LoadMUSType_RW_ARG(file, MUS_MID, 1, "s0;t1;v1;b68;");
if(!music) @{
    printf("Mix_LoadMUSType_RW_ARG(file, MUS_MID, 1, \"s0;t1;v1;b68;\"): %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Music},
@ref{Mix_LoadMUS_RW},
@ref{Mix_LoadMUS_RW_GME},
@ref{Mix_LoadMUSType_RW},
@ref{Mix_SetMusicCMD},
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_FadeInMusicPos}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FreeMusic
@subsection Mix_FreeMusic
@findex Mix_FreeMusic

@noindent
@code{void @b{Mix_FreeMusic}(Mix_Music *@var{music})}

@table @var
@item music
Pointer to Mix_Music to free.
@end table

@noindent
Free the loaded @var{music}.  If @var{music} is playing it will be halted.  If @var{music} is fading out, then this function will wait (blocking) until the fade out is complete.

@cartouche
@example
// free music
Mix_Music *music;
Mix_FreeMusic(music);
music=NULL; // so we know we freed it...
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadMUS}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetFreeOnStop
@subsection Mix_SetFreeOnStop
@findex Mix_SetFreeOnStop

@noindent
@code{void @b{Mix_FreeMusic}(Mix_Music *@var{music}, int @var{free_on_stop})}

@table @var
@item music
Pointer to Mix_Music to free.
@item free_on_stop
1 - make music to be free automatically when it finishes the playback, 0 - cancel the automatical free.
@end table

@noindent
Mark the loaded @var{music} to be free automatically when it get halted.
Can be used to simplify the dynamic stream processing when you want
to automatically free the music once it get halted.@*
@*
@b{Note:} Music will NOT be free when you stop it manually using the @ref{Mix_HaltMusicStream} call.
However, it will get free automatically when you will use the @ref{Mix_FadeOutMusicStream} call
with a non-zero @var{ms} delay.@*
Supported by multi-stream music sub-system only.

@cartouche
@example
// free music
Mix_Music *music;
// play music once
Mix_PlayMusicStream(music, 1);
// Mark music to be free automatically
Mix_SetFreeOnStop(music, 1);
music=NULL; // we are safe to NULL this, no memory leak promised
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_LoadMUS}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayMusicStream
@subsection Mix_PlayMusicStream
@findex Mix_PlayMusicStream

@noindent
@code{int @b{Mix_PlayMusicStream}(Mix_Music *@var{music}, int @var{loops})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@end table

@noindent
Play the loaded @var{music} @var{loop} times through from start to finish.
The previous music will continue play or fade concurrently.
You can use this function to play multiple parallel music files
(or long atmosphere sound effects).@*
@*
@b{CAUTION:} You can't use this function with MIDI played through @b{Native MIDI}
interface: this interface doesn't support parallel playing of multiple music files.
Please use the @ref{Mix_PlayMusic} function to playNativeMidi as a single-stream
music.

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever
// Mix_Music *music; // I assume this has been loaded already
if(Mix_PlayMusicStream(music, -1)==-1) @{
    printf("Mix_PlayMusicStream: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStream}
@ref{Mix_CrossFadeMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInMusicStream
@subsection Mix_FadeInMusicStream
@findex Mix_FadeInMusicStream

@noindent
@code{int @b{Mix_FadeInMusicStream}(Mix_Music *@var{music}, int @var{loops}, int @var{ms})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{music}, playing
it @var{loop} times through from start to finish.@*
The fade in effect only applies to the first loop.@*
Any previous music will continue play or fade concurrently.
You can use this function to play multiple parallel music files
(or long atmosphere sound effects).@*
This function is the same as @code{Mix_FadeInMusicStreamPos(@var{music}, @var{loops}, @var{ms}, 0)}.@*
@*
@b{CAUTION:} You can't use this function with MIDI played through @b{Native MIDI}
interface: this interface doesn't support parallel playing of multiple music files.
Please use the @ref{Mix_FadeInMusic} function to play NativeMidi as a single-stream
music.

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *music; // I assume this has been loaded already
if(Mix_FadeInMusicStream(music, -1, 2000)==-1) @{
    printf("Mix_FadeInMusicStream: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusicStream},
@ref{Mix_FadeInMusicStreamPos}
@ref{Mix_CrossFadeMusicStream}
@ref{Mix_CrossFadeMusicStreamPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInMusicStreamPos
@subsection Mix_FadeInMusicStreamPos
@findex Mix_FadeInMusicStreamPos

@noindent
@code{int @b{Mix_FadeInMusicStreamPos}(Mix_Music *@var{music}, int @var{loops}, int @var{ms}, double @var{position})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@item position
Position to play from, see @code{Mix_SetMusicPositionStream} for meaning.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{music}, playing it @var{loop} times through from start to finish.@*
The fade in effect only applies to the first loop.@*
The first time the music is played, it position will be set to @var{position}, which means different things for different types of music files, see @code{Mix_SetMusicPosition} for more info on that.@*
Any previous music will continue play or fade concurrently.
You can use this function to play multiple parallel music files
(or long atmosphere sound effects).@*
@*
@b{CAUTION:} You can't use this function with MIDI played through @b{Native MIDI}
interface: this interface doesn't support parallel playing of multiple music files.
Please use the @ref{Mix_FadeInMusicPos} function to play NativeMidi as a single-stream
music.@*

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *music; // I assume this has been loaded already
if(Mix_FadeInMusicStreamPos(music, -1, 2000)==-1) @{
    printf("Mix_FadeInMusicStream: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusicStream},
@ref{Mix_FadeInMusicStream},
@ref{Mix_SetMusicPosition}
@ref{Mix_CrossFadeMusicStream}
@ref{Mix_CrossFadeMusicStreamPos}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_CrossFadeMusicStream
@subsection Mix_CrossFadeMusicStream
@findex Mix_CrossFadeMusicStream

@noindent
@code{int @b{Mix_CrossFadeMusicStream}(Mix_Music *@var{old_music}, Mix_Music *@var{new_music}, int @var{loops}, int @var{ms}, int @var{free_old})}

@table @var
@item old_music
Pointer to old playing Mix_Music to stop with the fade out effect.
@item new_music
Pointer to new Mix_Music to play with the fade in effect.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@item free_old
Automatically free the old music after it will complete the fade out.@*
0 keeps the old music untouched.@*
1 music will be deleted after it will complete the fade out.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{new_music}, playing it @var{loop} times through from start to finish.@*
Fade out the @var{old_music} at the same time as fade in the @var{new_music}.@*
The fade in effect only applies to the first loop.@*
Any previous music will continue play or fade concurrently.@*
This function is the same as @code{Mix_CrossFadeMusicStreamPos(@var{old_music}, @var{new_music}, @var{loops}, @var{ms}, 0, 0)}.@*
@*
@b{CAUTION:} You can't use this function with MIDI played through @b{Native MIDI}
interface: this interface doesn't support parallel playing of multiple music files.

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *old_music; // I assume this has been loaded already and playing now
// Mix_Music *new_music; // I assume this has been loaded already
if(Mix_CrossFadeMusicStream(old_music, new_music, -1, 2000, 0)==-1) @{
    printf("Mix_CrossFadeMusicStream: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusicStream},
@ref{Mix_CrossFadeMusicStreamPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_CrossFadeMusicStreamPos
@subsection Mix_CrossFadeMusicStreamPos
@findex Mix_CrossFadeMusicStreamPos

@noindent
@code{int @b{Mix_CrossFadeMusicStreamPos}(Mix_Music *@var{old_music}, Mix_Music *@var{new_music}, int @var{loops}, int @var{ms}, double @var{position}, int @var{free_old})}

@table @var
@item old_music
Pointer to old playing Mix_Music to stop with the fade out effect.
@item new_music
Pointer to new Mix_Music to play with the fade in effect.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@item position
Position to play from, see @code{Mix_SetMusicPositionStream} for meaning.
@item free_old
Automatically free the old music after it will complete the fade out.@*
0 keeps the old music untouched.@*
1 music will be deleted after it will complete the fade out.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{music}, playing it @var{loop} times through from start to finish.@*
Fade out the @var{old_music} at the same time as fade in the @var{new_music}.@*
The fade in effect only applies to the first loop.@*
The first time the music is played, it position will be set to @var{position}, which means different things for different types of music files, see @code{Mix_SetMusicPosition} for more info on that.@*
Any previous music will continue play or fade concurrently.@*
@*
@b{CAUTION:} You can't use this function with MIDI played through @b{Native MIDI}
interface: this interface doesn't support parallel playing of multiple music files.@*

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *old_music; // I assume this has been loaded already and playing now
// Mix_Music *new_music; // I assume this has been loaded already
if(Mix_CrossFadeMusicStreamPos(old_music, new_music, -1, 2000, 0)==-1) @{
    printf("Mix_CrossFadeMusicStream: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusicStream},
@ref{Mix_CrossFadeMusicStream},
@ref{Mix_SetMusicPosition}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HookMusic
@subsection Mix_HookMusic
@findex Mix_HookMusic

@example
void @b{Mix_HookMusic}(void (*@var{mix_func})(void *udata, Uint8 *stream, int len),
                   void *@var{arg})
@end example

@table @var
@item mix_func
Function pointer to a music player mixer function.@*
NULL will stop the use of the music player, returning the mixer to using the internal music players like usual.
@item arg
This is passed to the @var{mix_func}'s @code{udata} parameter when it is called.
@end table

@noindent
This sets up a custom music player function.  The function will be called with @var{arg} passed into the @code{udata} parameter when the @var{mix_func} is called.  The @code{stream} parameter passes in the audio stream buffer to be filled with @code{len} bytes of music.  The music player will then be called automatically when the mixer needs it.  Music playing will start as soon as this is called.  All the music playing and stopping functions have no effect on music after this.  Pause and resume will work.  Using a custom music player and the internal music player is not possible, the custom music player takes priority.  To stop the custom music player call @code{Mix_HookMusic(NULL, NULL)}.@*
@b{NOTE}: NEVER call SDL_Mixer functions, nor @code{SDL_LockAudio}, from a callback function.

@cartouche
@example
// make a music play function
// it expects udata to be a pointer to an int
void myMusicPlayer(void *udata, Uint8 *stream, int len)
@{
    int i, pos=*(int*)udata;

    // fill buffer with...uh...music...
    for(i=0; i<len; i++)
        stream[i]=(i+pos)&ff;

    // set udata for next time
    pos+=len;
    *(int*)udata=pos;
@}
...
// use myMusicPlayer for playing...uh...music
int music_pos=0;
Mix_HookMusic(myMusicPlayer, &music_pos);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicCMD},
@ref{Mix_GetMusicHookData}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayMusic
@subsection Mix_PlayMusic
@findex Mix_PlayMusic

@noindent
@code{int @b{Mix_PlayMusic}(Mix_Music *@var{music}, int @var{loops})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@end table

@noindent
Play the loaded @var{music} @var{loop} times through from start to finish.  The previous music will be halted, or if fading out it waits (blocking) for that to finish.@*
Please use the @ref{Mix_PlayMusicStream} function to play multiple music streams in parallel.

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever
// Mix_Music *music; // I assume this has been loaded already
if(Mix_PlayMusic(music, -1)==-1) @{
    printf("Mix_PlayMusic: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInMusic
@subsection Mix_FadeInMusic
@findex Mix_FadeInMusic

@noindent
@code{int @b{Mix_FadeInMusic}(Mix_Music *@var{music}, int @var{loops}, int @var{ms})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{music}, playing it @var{loop} times through from start to finish.@*
The fade in effect only applies to the first loop.@*
Any previous music will be halted, or if it is fading out it will wait (blocking) for the fade to complete.@*
This function is the same as @code{Mix_FadeInMusicPos(@var{music}, @var{loops}, @var{ms}, 0)}.@*
Please use the @ref{Mix_FadeInMusicStream} function to play multiple music streams in parallel.

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *music; // I assume this has been loaded already
if(Mix_FadeInMusic(music, -1, 2000)==-1) @{
    printf("Mix_FadeInMusic: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusicPos}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeInMusicPos
@subsection Mix_FadeInMusicPos
@findex Mix_FadeInMusicPos

@noindent
@code{int @b{Mix_FadeInMusicPos}(Mix_Music *@var{music}, int @var{loops}, int @var{ms}, double @var{position})}

@table @var
@item music
Pointer to Mix_Music to play.
@item loops
number of times to play through the music.@*
0 plays the music zero times...@*
-1 plays the music forever (or as close as it can get to that)
@item ms
Milliseconds for the fade-in effect to complete.
@item position
Position to play from, see @code{Mix_SetMusicPosition} for meaning.
@end table

@noindent
Fade in over @var{ms} milliseconds of time, the loaded @var{music}, playing it @var{loop} times through from start to finish.@*
The fade in effect only applies to the first loop.@*
The first time the music is played, it position will be set to @var{position}, which means different things for different types of music files, see @code{Mix_SetMusicPosition} for more info on that.@*
Any previous music will be halted, or if it is fading out it will wait (blocking) for the fade to complete.@*
Please use the @ref{Mix_FadeInMusicStreamPos} function to play multiple music streams in parallel.@*

@noindent
@b{Returns}: 0 on success, or -1 on errors.

@cartouche
@example
// play music forever, fading in over 2 seconds
// Mix_Music *music; // I assume this has been loaded already
if(Mix_FadeInMusicPos(music, -1, 2000)==-1) @{
    printf("Mix_FadeInMusic: %s\n", Mix_GetError());
    // well, there's no music, but most games don't break without music...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusic},
@ref{Mix_FadeInMusic},
@ref{Mix_SetMusicPosition}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_VolumeMusicStream
@subsection Mix_VolumeMusicStream
@findex Mix_VolumeMusicStream

@noindent
@code{int @b{Mix_VolumeMusicStream}(Mix_Music *@var{music}, int @var{volume})}

@table @var
@item music
Music to set the volume.
@item volume
Music volume, from 0 to @b{MIX_MAX_VOLUME}(128).@*
Values greater than @b{MIX_MAX_VOLUME} will use @b{MIX_MAX_VOLUME}.@*
-1 does not set the volume, but does return the current volume setting.
@end table

@noindent
Set the volume to @var{volume}, if it is 0 or greater, and return the previous volume setting.
Setting the volume during a fade will not work, the faders use this function to perform their effect!
Setting volume while using an external music player set by @code{Mix_SetMusicCMD} will have no effect,
and @code{Mix_GetError} will show the reason why not.

@noindent
@b{Returns}: The previous volume setting.

@cartouche
@example
// set the music volume to 1/2 maximum, and then check it
printf("volume was    : %d\n", Mix_VolumeMusicStream(someMusic, MIX_MAX_VOLUME/2));
printf("volume is now : %d\n", Mix_GetVolumeMusicStream(someMusic));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicVolume},
@ref{Mix_GetVolumeMusicStream},
@ref{Mix_VolumeMusicGeneral},
@ref{Mix_GetVolumeMusicGeneral},
@ref{Mix_FadeInMusicStream},
@ref{Mix_FadeOutMusicStream},
@ref{Mix_SetMusicCMD}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicVolume
@subsection Mix_GetMusicVolume
@findex Mix_GetMusicVolume

@noindent
@code{int @b{Mix_GetMusicVolume}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the volume.
@end table

@noindent
Get the current volume set on the @var{music}.

@noindent
@b{Returns}: The current volume setting set on the @var{music}.

@noindent
@b{See Also}:@*
@ref{Mix_GetVolumeMusicStream},
@ref{Mix_VolumeMusicStream},
@ref{Mix_VolumeMusicGeneral},
@ref{Mix_GetVolumeMusicGeneral},
@ref{Mix_FadeInMusicStream},
@ref{Mix_FadeOutMusicStream},
@ref{Mix_SetMusicCMD}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetVolumeMusicStream
@subsection Mix_GetVolumeMusicStream
@findex Mix_GetVolumeMusicStream

@noindent
@code{int @b{Mix_GetVolumeMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the volume.
@end table

@noindent
Get the current volume set on the @var{music}. This is an alias to the @ref{Mix_GetMusicVolume} function.

@noindent
@b{Returns}: The current volume setting set on the @var{music}.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicVolume},
@ref{Mix_VolumeMusicStream},
@ref{Mix_VolumeMusicGeneral},
@ref{Mix_GetVolumeMusicGeneral},
@ref{Mix_FadeInMusicStream},
@ref{Mix_FadeOutMusicStream},
@ref{Mix_SetMusicCMD}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_VolumeMusicGeneral
@subsection Mix_VolumeMusicGeneral
@findex Mix_VolumeMusicGeneral

@noindent
@code{void @b{Mix_VolumeMusicGeneral}(int @var{volume})}

@table @var
@item volume
General multi-stream music volume, from 0 to @b{MIX_MAX_VOLUME}(128).@*
Values greater than @b{MIX_MAX_VOLUME} will use @b{MIX_MAX_VOLUME}.@*
@end table

@noindent
Set the general multi-stream music volume to @var{volume}, if it is 0 or greater.
Setting volume while using an external music player set by @code{Mix_SetMusicCMD} will have no effect.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicVolume},
@ref{Mix_VolumeMusicStream},
@ref{Mix_GetVolumeMusicGeneral},
@ref{Mix_FadeInMusicStream},
@ref{Mix_FadeOutMusicStream},
@ref{Mix_SetMusicCMD}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetVolumeMusicGeneral
@subsection Mix_GetVolumeMusicGeneral
@findex Mix_GetVolumeMusicGeneral

@noindent
@code{int @b{Mix_GetVolumeMusicGeneral}()}

@noindent
Get the current general multi-stream music volume.

@noindent
@b{Returns}: The current general multi-stream music volume.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicVolume},
@ref{Mix_VolumeMusicStream},
@ref{Mix_VolumeMusicGeneral},
@ref{Mix_FadeInMusicStream},
@ref{Mix_FadeOutMusicStream},
@ref{Mix_SetMusicCMD}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PauseMusicStream
@subsection Mix_PauseMusicStream
@findex Mix_PauseMusicStream

@noindent
@code{void @b{Mix_PauseMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
Music to pause.
@end table

@noindent
Pause the @var{music} playback.  You may halt paused music.@*
@b{Note}: Music can only be paused if it is actively playing.

@cartouche
@example
// pause music playback
Mix_PauseMusicStream(music);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_ResumeMusicStream},
@ref{Mix_PausedMusicStream},
@ref{Mix_HaltMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PauseMusicStreamAll
@subsection Mix_PauseMusicStreamAll
@findex Mix_PauseMusicStreamAll

@noindent
@code{void @b{Mix_PauseMusicStreamAll}()}

@noindent
Pause all multi-stream music playback.  You may halt any paused music.@*
@b{Note}: Music can only be paused if it is actively playing.

@cartouche
@example
// pause music playback
Mix_PauseMusicStreamAll();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_ResumeMusicStream},
@ref{Mix_PausedMusicStream},
@ref{Mix_HaltMusicStream}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ResumeMusicStream
@subsection Mix_ResumeMusicStream
@findex Mix_ResumeMusicStream

@noindent
@code{void @b{Mix_ResumeMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
Paused music to resume.
@end table

@noindent
Unpause the @var{music}. This is safe to use on halted, paused, and already playing music.

@cartouche
@example
// resume music playback
Mix_ResumeMusicStream(music);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PauseMusicStream},
@ref{Mix_PausedMusicStream},
@ref{Mix_HaltMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ResumeMusicStreamAll
@subsection Mix_ResumeMusicStreamAll
@findex Mix_ResumeMusicStreamAll


@noindent
@code{void @b{Mix_ResumeMusicStreamAll}()}

@noindent
Unpause all multi-stream music. This is safe to use on halted, paused, and already playing music.

@cartouche
@example
// resume music playback
Mix_ResumeMusicStreamAll();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_ResumeMusicStream},
@ref{Mix_PausedMusicStream},
@ref{Mix_HaltMusicStream}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_RewindMusicStream
@subsection Mix_RewindMusicStream
@findex Mix_RewindMusicStream

@noindent
@code{void @b{Mix_RewindMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
Music to rewind.
@end table

@noindent
Rewind the music to the start.  This is safe to use on halted, paused, and already playing music.  It is not useful to rewind the music immediately after starting playback, because it starts at the beginning by default.

@noindent
This function only works for streams that supports the seekability.

@cartouche
@example
// rewind music playback to the start
Mix_RewindMusicStream(music);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusicStream}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicPositionStream
@subsection Mix_SetMusicPositionStream
@findex Mix_SetMusicPositionStream

@noindent
@code{int @b{Mix_SetMusicPositionStream}(Mix_Music *@var{music}, double @var{position})}

@table @var
@item music
Music to change the position.
@item position
Position to play from in seconds.
@end table

@noindent
Set the position of the @var{music}.
The @var{position} takes different meanings for different music sources.
It only works on the music sources listed below.

@table @b
@item WAV
Jumps to @var{position} seconds from the beginning of the song.
@item MOD
@b{ModPlug or XMP}: Jumps to @var{position} seconds from the beginning of the song.@*
Passing zero is similar to rewinding the song.
@item OGG
Jumps to @var{position} seconds from the beginning of the song.
@item OPUS
Jumps to @var{position} seconds from the beginning of the song.
@item FLAC
Jumps to @var{position} seconds from the beginning of the song.
@item MP3
Jumps to @var{position} seconds from the beginning of the song.
@item GME
Jumps to @var{position} seconds from the beginning of the song.
@item MIDI
Works for @b{libADLMIDI} and @b{libOPNMIDI}. Doesn't works for @b{Timidity}, @b{FluidSynth}, and @b{NativeMIDI}.
Jumps to @var{position} seconds from the beginning of the song.
@end table

@noindent
@b{Returns}: 0 on success, or -1 if the codec doesn't support this function.

@cartouche
@example
// skip one minute into the song, from the start
if(Mix_SetMusicPositionStream(music, 60.0)==-1) @{
    printf("Mix_SetMusicPositionStream: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_GetMusicPosition},
@ref{Mix_MusicDuration},
@ref{Mix_StartTrack},
@ref{Mix_GetNumTracks}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicPosition
@subsection Mix_GetMusicPosition
@findex Mix_GetMusicPosition

@noindent
@code{double @b{Mix_GetMusicPosition}(Mix_Music *@var{music})}

@table @var
@item music
A pointer to current music stream
@end table

@noindent
Get the time current position of music stream. It only works on some of music sources listed in table shown in description of @ref{Mix_SetMusicPosition} function.

@noindent
@b{Returns}: seconds value of current music position or -1.0 if this feature is not supported for some codec

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration},
@ref{Mix_StartTrack},
@ref{Mix_GetNumTracks}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ModMusicStreamJumpToOrder
@subsection Mix_ModMusicStreamJumpToOrder
@findex Mix_ModMusicStreamJumpToOrder

@noindent
@code{int @b{Mix_ModMusicStreamJumpToOrder}(Mix_Music *@var{music}, int @var{order})}

@table @var
@item music
Music to change the position.
@item order
A pattern number in the module.
@end table

@noindent
Jump to a given order in mod music. Only for MOD music formats.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration},
@ref{Mix_StartTrack},
@ref{Mix_GetNumTracks}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_StartTrack
@subsection Mix_StartTrack
@findex Mix_StartTrack

@noindent
@code{int @b{Mix_StartTrack}(Mix_Music *@var{music}, int @var{track})}

@table @var
@item music
Music to select a sub-song for play.
@item track
A song number from 0 to N-1 to play.
@end table

@noindent
Starts a sub-song to play. This function works when one music file contains multiple songs, for example, various chiptunes like NSF, HES, or XMI-based MIDI files.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration},
@ref{Mix_ModMusicStreamJumpToOrder},
@ref{Mix_GetNumTracks}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetNumTracks
@subsection Mix_GetNumTracks
@findex Mix_GetNumTracks

@noindent
@code{int @b{Mix_GetNumTracks}(Mix_Music *@var{music})}

@table @var
@item music
Music to get count of sub-songs inside.
@end table

@noindent
Returns a total count of sub-songs inside the given music. This function works when one music file contains multiple songs, for example, various chiptunes like NSF, HES, or XMI-based MIDI files.

@noindent
@b{Returns}: a total count of sub-songs inside the given music, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration},
@ref{Mix_ModMusicStreamJumpToOrder},
@ref{Mix_StartTrack}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_MusicDuration
@subsection Mix_MusicDuration
@findex Mix_MusicDuration

@noindent
@code{double @b{Mix_MusicDuration}(Mix_Music *@var{music})}

@table @var
@item music
A pointer to current music stream
@end table

@noindent
Get the full duration time of music stream. It only works on some of music sources listed in table shown in description of @ref{Mix_SetMusicPosition} function.

@noindent
@b{Returns}: seconds value of current music total length or -1.0 if this feature is not supported for some codec

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicPos},
@ref{Mix_GetMusicPosition},
@ref{Mix_SetMusicPosition},
@ref{Mix_StartTrack},
@ref{Mix_GetNumTracks}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicLoopStartTime
@subsection Mix_GetMusicLoopStartTime
@findex Mix_GetMusicLoopStartTime

@noindent
@code{double @b{Mix_GetMusicLoopStartTime}(Mix_Music *@var{music})}

@table @var
@item music
A pointer to current music stream
@end table

@noindent
A part of loop points feature. Get the loop start time position of music stream. It only works on some of music sources.

@noindent
@b{Returns}: seconds value of current music loop start position or -1.0 if this feature is not supported for some codec

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicLoopEndTime},
@ref{Mix_GetMusicLoopLengthTime}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicLoopEndTime
@subsection Mix_GetMusicLoopEndTime
@findex Mix_GetMusicLoopEndTime

@noindent
@code{double @b{Mix_GetMusicLoopEndTime}(Mix_Music *@var{music})}

@table @var
@item music
A pointer to current music stream
@end table

@noindent
A part of loop points feature. Get the loop time length of music stream. It only works on some of music sources.

@noindent
@b{Returns}: seconds value of current music loop end position or -1.0 if this feature is not supported for some codec

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicLoopStartTime},
@ref{Mix_GetMusicLoopLengthTime}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicLoopLengthTime
@subsection Mix_GetMusicLoopLengthTime
@findex Mix_GetMusicLoopLengthTime

@noindent
@code{double @b{Mix_GetMusicLoopEndTime}(Mix_Music *@var{music})}

@table @var
@item music
A pointer to current music stream
@end table

@noindent
A part of loop points feature. Get the loop time length of music stream. It only works on some of music sources.

@noindent
@b{Returns}: seconds value of current music loop length time or -1.0 if this feature is not supported for some codec

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicLoopStartTime},
@ref{Mix_GetMusicLoopEndTime}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicTempo
@subsection Mix_SetMusicTempo
@findex Mix_SetMusicTempo

@noindent
@code{int @b{Mix_SetMusicTempo}(Mix_Music *@var{music}, double @var{tempo})}

@table @var
@item music
Music to change the tempo.
@item tempo
Tempo multiplier. Setting value into the 1.0 will reset the tempo into default.
@end table

@noindent
Set the current tempo multiplier in the music stream.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTempo},
@ref{Mix_SetMusicSpeed},
@ref{Mix_SetMusicPitch},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicTempo
@subsection Mix_GetMusicTempo
@findex Mix_GetMusicTempo

@noindent
@code{double @b{Mix_GetMusicTempo}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the tempo.
@end table

@noindent
Returns the current tempo multiplier of the music stream.

@noindent
@b{Returns}: positive value if successful, or -1.0 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicTempo},
@ref{Mix_SetMusicSpeed},
@ref{Mix_SetMusicPitch},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicSpeed
@subsection Mix_SetMusicSpeed
@findex Mix_SetMusicSpeed

@noindent
@code{int @b{Mix_SetMusicSpeed}(Mix_Music *@var{music}, double @var{speed})}

@table @var
@item music
Music to change the speed.
@item speed
Speed multiplier. Setting value into the 1.0 will reset the speed into default.
@end table

@noindent
Set the current speed (both tempo and pitch will be changed) multiplier in the music stream.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTempo},
@ref{Mix_GetMusicPitch},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicSpeed
@subsection Mix_GetMusicSpeed
@findex Mix_GetMusicSpeed

@noindent
@code{double @b{Mix_GetMusicSpeed}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the speed.
@end table

@noindent
Returns the current speed multiplier (both tempo and pitch will be changed) of the music stream.

@noindent
@b{Returns}: positive value if successful, or -1.0 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicTempo},
@ref{Mix_SetMusicPitch},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicPitch
@subsection Mix_SetMusicPitch
@findex Mix_SetMusicPitch

@noindent
@code{int @b{Mix_SetMusicPitch}(Mix_Music *@var{music}, double @var{pitch})}

@table @var
@item music
Music to change the pitch.
@item pitch
Pitch multiplier. Setting value into the 1.0 will reset the tempo into default.
@end table

@noindent
Set the current pitch multiplier in the music stream.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTempo},
@ref{Mix_GetMusicSpeed},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicPitch
@subsection Mix_GetMusicPitch
@findex Mix_GetMusicPitch

@noindent
@code{double @b{Mix_GetMusicPitch}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the pitch.
@end table

@noindent
Returns the current pitch multiplier of the music stream.

@noindent
@b{Returns}: positive value if successful, or -1.0 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicTempo},
@ref{Mix_SetMusicSpeed},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicTracks
@subsection Mix_GetMusicTracks
@findex Mix_GetMusicTracks

@noindent
@code{int @b{Mix_GetMusicTracks}(Mix_Music *@var{music})}

@table @var
@item music
Music to get the number of tracks/channels.
@end table

@noindent
Get the count of concurrently playing tracks at the song (MIDI, Tracker, Chiptune, etc.)

@noindent
@b{Returns}: count of tracks/channels if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_SetMusicTrackMute},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicTrackMute
@subsection Mix_SetMusicTrackMute
@findex Mix_SetMusicTrackMute

@noindent
@code{int @b{Mix_GetMusicTracks}(Mix_Music *@var{music}, int @var{track}, int @var{mute})}

@table @var
@item music
Music to get the number of tracks/channels.
@item track
Track/Channel number to mute
@item mute
The mute state: 1 mute, 0 unmute
@end table

@noindent
Mute one of playing tracks (or channels) at the song (MIDI, Tracker, Chiptune, etc.)

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTracks},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_SetMusicPositionStream},
@ref{Mix_MusicDuration}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicCMD
@subsection Mix_SetMusicCMD
@findex Mix_SetMusicCMD

@noindent
@code{int @b{Mix_SetMusicCMD}(const char *@var{command})}

@table @var
@item command
System command to play the music.  Should be a complete command, as if typed in to the command line, but it should expect the filename to be added as the last argument.@*
@b{NULL} will turn off using an external command for music, returning to the internal music playing functionality.
@end table

@noindent
Setup a command line music player to use to play music.  Any music playing will be halted.
The music file to play is set by calling @code{Mix_LoadMUS(filename)}, and the filename is appended as the last argument on the commandline.  This allows you to reuse the music command to play multiple files.  The command will be sent signals @b{SIGTERM} to halt, @b{SIGSTOP} to pause, and @b{SIGCONT} to resume.  The command program should react correctly to those signals for it to function properly with SDL_Mixer.  @code{Mix_VolumeMusic} has no effect when using an external music player, and @code{Mix_GetError} will have an error code set.  You should set the music volume in the music player's command if the music player supports that.  Looping music works, by calling the command again when the previous music player process has ended.  Playing music through a command uses a forked process to execute the music command.@*
To use the internal music players set the @var{command} to @b{NULL}.@*
@b{NOTE}: External music is not mixed by SDL_mixer, so no post-processing hooks will be for music.@*
@b{NOTE}: Playing music through an external command may not work if the sound driver does not support multiple openings of the audio device, since SDL_Mixer already has the audio device open for playing samples through channels.@*
@b{NOTE}: Commands are not totally portable, so be careful.

@noindent
@b{Returns}: 0 on success, or -1 on any errors, such as running out of memory.

@cartouche
@example
// use mpg123 to play music
Mix_Music *music=NULL;
if(Mix_SetMusicCMD("mpg123 -q")==-1) @{
    perror("Mix_SetMusicCMD");
@} else @{
    // play some mp3 file
    music=Mix_LoadMUS("music.mp3");
    if(music) @{
        Mix_PlayMusic(music,1);
    @}
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusic},
@ref{Mix_VolumeMusic}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetSynchroValue
@subsection Mix_GetSynchroValue
@findex Mix_GetSynchroValue

@noindent
@code{int @b{Mix_GetSynchroValue}()}

@noindent
Not supported by any players at this time.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetSynchroValue
@subsection Mix_SetSynchroValue
@findex Mix_SetSynchroValue

@noindent
@code{int @b{Mix_SetSynchroValue}(int @var{value})}

@noindent
Not supported by any players at this time.



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicFileName
@subsection Mix_SetMusicFileName
@findex Mix_SetMusicFileName

@noindent
@code{void @b{Mix_SetMusicFileName}(Mix_Music *@var{music}, const char *@var{file})}

@table @var
@item music
The music to change the reported filename.
@item file
The file name or file path.
@end table

@noindent
Change the filename reported by the @ref{Mix_GetMusicTitle} function in a case when
the actual title tag is not specified in the file.




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_VolumeMusic
@subsection Mix_VolumeMusic
@findex Mix_VolumeMusic

@noindent
@code{int @b{Mix_VolumeMusic}(int @var{volume})}

@table @var
@item volume
Music volume, from 0 to @b{MIX_MAX_VOLUME}(128).@*
Values greater than @b{MIX_MAX_VOLUME} will use @b{MIX_MAX_VOLUME}.@*
-1 does not set the volume, but does return the current volume setting.
@end table

@noindent
Set the volume to @var{volume}, if it is 0 or greater, and return the previous volume setting.  Setting the volume during a fade will not work, the faders use this function to perform their effect!  Setting volume while using an external music player set by @code{Mix_SetMusicCMD} will have no effect, and @code{Mix_GetError} will show the reason why not.

@noindent
@b{Returns}: The previous volume setting.

@cartouche
@example
// set the music volume to 1/2 maximum, and then check it
printf("volume was    : %d\n", Mix_VolumeMusic(MIX_MAX_VOLUME/2));
printf("volume is now : %d\n", Mix_VolumeMusic(-1));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusic},
@ref{Mix_FadeOutMusic},
@ref{Mix_SetMusicCMD}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PauseMusic
@subsection Mix_PauseMusic
@findex Mix_PauseMusic

@noindent
@code{void @b{Mix_PauseMusic}()}

@noindent
Pause the music playback.  You may halt paused music.@*
@b{Note}: Music can only be paused if it is actively playing.

@cartouche
@example
// pause music playback
Mix_PauseMusic();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_ResumeMusic},
@ref{Mix_PausedMusic},
@ref{Mix_HaltMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ResumeMusic
@subsection Mix_ResumeMusic
@findex Mix_ResumeMusic

@noindent
@code{void @b{Mix_ResumeMusic}()}

@noindent
Unpause the music.  This is safe to use on halted, paused, and already playing music.

@cartouche
@example
// resume music playback
Mix_ResumeMusic();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PauseMusic},
@ref{Mix_PausedMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_RewindMusic
@subsection Mix_RewindMusic
@findex Mix_RewindMusic

@noindent
@code{void @b{Mix_RewindMusic}()}

@noindent
Rewind the music to the start.  This is safe to use on halted, paused, and already playing music.  It is not useful to rewind the music immediately after starting playback, because it starts at the beginning by default.

@noindent
This function only works for these streams: MOD, OGG, MP3, Native MIDI.

@cartouche
@example
// rewind music playback to the start
Mix_RewindMusic();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayMusic}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMusicPosition
@subsection Mix_SetMusicPosition
@findex Mix_SetMusicPosition

@noindent
@code{int @b{Mix_SetMusicPosition}(double @var{position})}

@table @var
@item position
Position to play from.
@end table

@noindent
Set the position of the currently playing music.  The @var{position} takes different meanings for different music sources.  It only works on the music sources listed below.

@table @b
@item WAV
Jumps to @var{position} seconds from the beginning of the song.
@item MOD
@b{ModPlug or XMP}: Jumps to @var{position} seconds from the beginning of the song.@*
Passing zero is similar to rewinding the song.
@item OGG
Jumps to @var{position} seconds from the beginning of the song.
@item OPUS
Jumps to @var{position} seconds from the beginning of the song.
@item FLAC
Jumps to @var{position} seconds from the beginning of the song.
@item MP3
Jumps to @var{position} seconds from the beginning of the song.
@item GME
Jumps to @var{position} seconds from the beginning of the song.
@item MIDI
Works for @b{libADLMIDI} and @b{libOPNMIDI}. Doesn't works for @b{Timidity}, @b{FluidSynth}, and @b{NativeMIDI}.
Jumps to @var{position} seconds from the beginning of the song.
@end table

@noindent
@b{Returns}: 0 on success, or -1 if the codec doesn't support this function.

@cartouche
@example
// skip one minute into the song, from the start
if(Mix_SetMusicPosition(60.0)==-1) @{
    printf("Mix_SetMusicPosition: %s\n", Mix_GetError());
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicPos}
@ref{Mix_GetMusicPosition}
@ref{Mix_MusicDuration}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ModMusicJumpToOrder
@subsection Mix_ModMusicJumpToOrder
@findex Mix_ModMusicJumpToOrder

@noindent
@code{int @b{Mix_ModMusicJumpToOrder}(int @var{order})}

@table @var
@item order
A pattern number in the module.
@end table

@noindent
Jump to a given order in mod music currently playing as a single-stream. Only for MOD music formats.

@noindent
@b{Returns}: 0 if successful, or -1 if failed or isn't implemented.

@noindent
@b{See Also}:@*
@ref{Mix_FadeInMusicPos}
@ref{Mix_SetMusicPosition}
@ref{Mix_MusicDuration}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMidiPlayer
@subsection Mix_GetMidiPlayer
@findex Mix_GetMidiPlayer

@noindent
@code{int @b{Mix_GetMidiPlayer}()}

@noindent
Tells currently using MIDI sequencer to play MIDI files.

@noindent
@b{Returns}: The type of currently using MIDI device.

@cartouche
@example
// print the type of music currently playing
switch(Mix_GetMidiPlayer())
@{
    MIDI_ADLMIDI:
        printf("ADLMIDI is active.\n");
        break;
    MIDI_Native:
        printf("Operating system native MIDI is active.\n");
        break;
    MIDI_Timidity:
        printf("Timidity is active.\n");
        break;
    MIDI_OPNMIDI:
        printf("OPNMIDI is active.\n");
        break;
    MIDI_Fluidsynth:
        printf("FluidSynth is active.\n");
        break;
    default:
        printf("Unknown MIDI device is using.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetMidiPlayer}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetNextMidiPlayer
@subsection Mix_GetNextMidiPlayer
@findex Mix_GetNextMidiPlayer

@noindent
@code{int @b{Mix_GetNextMidiPlayer}()}

@noindent
Tells MIDI sequencer recently choosen by @ref{Mix_SetMidiPlayer} which will be use in next open of MIDI file.

@noindent
@b{Returns}: The type of currently using MIDI device.

@cartouche
@example
// print the type of music currently playing
switch(Mix_GetNextMidiPlayer())
@{
    MIDI_ADLMIDI:
        printf("ADLMIDI is next.\n");
        break;
    MIDI_Native:
        printf("Operating system native MIDI is next.\n");
        break;
    MIDI_Timidity:
        printf("Timidity is next.\n");
        break;
    MIDI_OPNMIDI:
        printf("OPNMIDI is next.\n");
        break;
    MIDI_Fluidsynth:
        printf("FluidSynth is next.\n");
        break;
    default:
        printf("Unknown MIDI device is next.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMidiPlayer},
@ref{Mix_SetMidiPlayer}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetMidiPlayer
@subsection Mix_SetMidiPlayer
@findex Mix_SetMidiPlayer

@noindent
@code{int @b{Mix_SetMidiPlayer}(int @var{device})}

@table @var
@item device
A @b{MIDI_*} enum value which identifies MIDI sequencer you want to use
@end table

@noindent
Allows to choose a MIDI sequencer to play MIDI files.
@b{NOTE}: new choosen MIDI device begins to work on  MIDI music file reopen

@noindent
@b{Returns}: 0 on success, or -1 on any errors, such as MIDI sequencer is unknown or does not built with this library assembly.
@cartouche
@example
//Set libOPNMIDI as MIDI playing sequencer
Mix_SetMidiPlayer(MIDI_OPNMIDI);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetLockMIDIArgs}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetLockMIDIArgs
@subsection Mix_SetLockMIDIArgs
@findex Mix_SetLockMIDIArgs

@noindent
@code{void @b{Mix_SetLockMIDIArgs}(int @var{lock_midiargs})}

@table @var
@item lock_midiargs
0 to disable locking or 1 to enable locking of MIDI arguments passed through @code{Mix_LoadMUS(filename)} function
@end table

@noindent
Allows to don't reset MIDI arguments to default when is no arguments passed through @code{Mix_LoadMUS(filename)} function, or different arguments was passed.

@cartouche
@example
//Turn on ignoring of MIDI arguments
Mix_SetLockMIDIArgs(1);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetMidiPlayer}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HaltMusicStream
@subsection Mix_HaltMusicStream
@findex Mix_HaltMusicStream

@noindent
@code{int @b{Mix_HaltMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
Playing music to halt.
@end table

@noindent
Halt playback of @var{music}. This interrupts music fader effects.
Any callback set by @code{Mix_HookMusicStreamFinished} will be called when the music stops.@*
@*
@b{Note:} Music will not be free automatically if you called the @ref{Mix_SetFreeOnStop} function before.

@noindent
@b{Returns}: always returns zero. (even more silly than @var{Mix_HaltGroup})

@cartouche
@example
// halt music playback
Mix_HaltMusicStream(music);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeOutMusicStream},
@ref{Mix_HookMusicStreamFinished},
@ref{Mix_HookMusicStreamFinishedAny}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeOutMusicStream
@subsection Mix_FadeOutMusicStream
@findex Mix_FadeOutMusicStream

@noindent
@code{int @b{Mix_FadeOutMusicStream}(Mix_Music *@var{music}, int @var{ms})}

@table @var
@item music
Playing music to fade out.
@item ms
Milliseconds of time that the fade-out effect should take to go to silence, starting now.
@end table

@noindent
Gradually fade out the @var{music} over @var{ms} milliseconds starting from now.
The @var{music} will be halted after the fade out is completed.
Only when music is playing and not fading already are set to fade out, including paused channels.
Any callback set by @code{Mix_HookMusicStreamFinished} will be called when the music finishes fading out.@*
@*
@b{Note:} Music will not be free automatically if you called the @ref{Mix_SetFreeOnStop} function before
and if you set the @var{ms} delay to be 0.

@noindent
@b{Returns}: 1 on success, 0 on failure.

@cartouche
@example
// fade out music to finish 3 seconds from now
while(!Mix_FadeOutMusicStream(music, 3000) && Mix_PlayingMusicStream(music)) @{
    // wait for any fades to complete
    SDL_Delay(100);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayingMusicStream},
@ref{Mix_HookMusicStreamFinished},
@ref{Mix_HookMusicStreamFinishedAny}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HookMusicStreamFinished
@subsection Mix_HookMusicStreamFinished
@findex Mix_HaMix_HookMusicStreamFinishedltMusic

@noindent
@code{void @b{Mix_HookMusicStreamFinished}(Mix_Music *@var{music}, void (*@var{music_finished})(SDLCALL *music_finished)(Mix_Music*, void*), void *@var{user_data})}

@table @var
@item music
Music to set the hook.
@item music_finished
Function pointer to a @code{void function(Mix_Music *music, void *user_data)}.@*
@b{NULL} will remove the hook.
@item user_data
User data pointer used with the the @var{music_finished} callback
@end table

@noindent
This sets up a function to be called when @var{music} playback is halted.
Any time music stops, the @var{music_finished} function will be called.
Call with @b{NULL} to remove the callback.@*
@b{NOTE}: NEVER call SDL_Mixer functions, nor @code{SDL_LockAudio}, from a callback function.

@cartouche
@example
// make a music finished function
void musicFinished(Mix_Music *music, void *user_data)
@{
    printf("Music stopped.\n");
@}
...
// use musicFinished for when music stops
Mix_HookMusicStreamFinished(music, musicFinished);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltMusicStream},
@ref{Mix_FadeOutMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HookMusicStreamFinishedAny
@subsection Mix_HookMusicStreamFinishedAny
@findex Mix_HookMusicStreamFinishedAny

@noindent
@code{void @b{Mix_HookMusicStreamFinishedAny}(void (*@var{music_finished})())}

@table @var
@item music_finished
Function pointer to a @code{void function()}.@*
@b{NULL} will remove the hook.
@end table

@noindent
This sets up a function to be called when any multi-stream music playback is halted.
Any time music stops, the @var{music_finished} function will be called.  Call with @b{NULL} to remove the callback.@*
@b{NOTE}: NEVER call SDL_Mixer functions, nor @code{SDL_LockAudio}, from a callback function.

@cartouche
@example
// make a music finished function
void musicFinished()
@{
    printf("Music stopped.\n");
@}
...
// use musicFinished for when any music stops
Mix_HookMusicStreamFinishedAny(musicFinished);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltMusicStream},
@ref{Mix_FadeOutMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HaltMusic
@subsection Mix_HaltMusic
@findex Mix_HaltMusic

@noindent
@code{int @b{Mix_HaltMusic}()}

@noindent
Halt playback of music. This interrupts music fader effects.
Any callback set by @code{Mix_HookMusicFinished} will be called when the music stops.

@noindent
@b{Returns}: always returns zero. (even more silly than @var{Mix_HaltGroup})

@cartouche
@example
// halt music playback
Mix_HaltMusic();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeOutMusic},
@ref{Mix_HookMusicFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeOutMusic
@subsection Mix_FadeOutMusic
@findex Mix_FadeOutMusic

@noindent
@code{int @b{Mix_FadeOutMusic}(int @var{ms})}

@table @var
@item ms
Milliseconds of time that the fade-out effect should take to go to silence, starting now.
@end table

@noindent
Gradually fade out the music over @var{ms} milliseconds starting from now.
The music will be halted after the fade out is completed.  Only when music is playing and not fading already are set to fade out, including paused channels.
Any callback set by @code{Mix_HookMusicFinished} will be called when the music finishes fading out.

@noindent
@b{Returns}: 1 on success, 0 on failure.

@cartouche
@example
// fade out music to finish 3 seconds from now
while(!Mix_FadeOutMusic(3000) && Mix_PlayingMusic()) @{
    // wait for any fades to complete
    SDL_Delay(100);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltMusic},
@ref{Mix_FadingMusic},
@ref{Mix_PlayingMusic},
@ref{Mix_HookMusicFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HookMusicFinished
@subsection Mix_HookMusicFinished
@findex Mix_HookMusicFinished

@noindent
@code{void @b{Mix_HookMusicFinished}(void (*@var{music_finished})())}

@table @var
@item music_finished
Function pointer to a @code{void function()}.@*
@b{NULL} will remove the hook.
@end table

@noindent
This sets up a function to be called when single-stream music playback is halted.  Any time music stops, the @var{music_finished} function will be called.  Call with @b{NULL} to remove the callback.@*
@b{NOTE}: NEVER call SDL_Mixer functions, nor @code{SDL_LockAudio}, from a callback function.

@cartouche
@example
// make a music finished function
void musicFinished()
@{
    printf("Music stopped.\n");
@}
...
// use musicFinished for when music stops
Mix_HookMusicFinished(musicFinished);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltMusic},
@ref{Mix_FadeOutMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicType
@subsection Mix_GetMusicType
@findex Mix_GetMusicType

@noindent
@code{Mix_MusicType @b{Mix_GetMusicType}(const Mix_Music *@var{music})}

@table @var
@item music
The music to get the type of.@*
@b{NULL} will get the currently playing single-stream music type.
@end table

@noindent
Tells you the file format encoding of the music.  This may be handy when used
with @code{Mix_SetMusicPosition}, and other music functions that vary based on
the type of music being played.  If you want to know the type of music currently
being played, pass in @b{NULL} to @var{music}.

@noindent
@b{Returns}: The type of @var{music} or if @var{music} is @b{NULL} then the currently playing music type, otherwise @b{MUS_NONE} if no music is playing.

@cartouche
@example
// print the type of music currently playing
switch(Mix_GetMusicType(NULL))
@{
    case MUS_NONE:
    MUS_CMD:
        printf("Command based music is playing.\n");
        break;
    MUS_WAV:
        printf("WAVE/RIFF music is playing.\n");
        break;
    MUS_MOD:
        printf("MOD (XMP/ModPlug) music is playing.\n");
        break;
    MUS_MID:
        printf("MIDI music is playing.\n");
        break;
    MUS_OGG:
        printf("OGG music is playing.\n");
        break;
    MUS_MP3:
        printf("MP3 music is playing.\n");
        break;
    MUS_OPUS: // [Mixer 2.0]
        printf("OPUS music is playing.\n");
        break;
    MUS_GME: // [Mixer X]
        printf("Game Music Emulators music is playing.\n");
        break;
    MUS_ADLMIDI: // [Mixer X]
        printf("IMF/CMF/XMI music is playing\n");
        break;
    default:
        printf("Unknown music is playing.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_MusicType},
@ref{Mix_SetPosition}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayingMusicStream
@subsection Mix_PlayingMusicStream
@findex Mix_PlayingMusicStream

@noindent
@code{int @b{Mix_PlayingMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
The music to get playing state.@*
@b{NULL} will get the currently playing music playing state.
@end table

@noindent
Tells you if @var{music} is actively playing, or not.@*
@b{Note}: Does not check if the channel has been paused.

@noindent
@b{Returns}: Zero if the @var{music} is not playing, or 1 if it is playing.

@cartouche
@example
// check if music is playing
printf("music is%s playing.\n", Mix_PlayingMusicStream(music)?"":" not");
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PausedMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PausedMusicStream
@subsection Mix_PausedMusicStream
@findex Mix_PausedMusicStream

@noindent
@code{int @b{Mix_PausedMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
The music to get paused state.@*
@b{NULL} will get the currently playing music paused state.
@end table

@noindent
Tells you if @var{music} is paused, or not.@*
@b{Note}: Does not check if the @var{music} was been halted after it was paused, which may seem a little weird.

@noindent
@b{Returns}: Zero if music is not paused.  1 if it is paused.

@cartouche
@example
// check the music pause status
printf("music is%s paused\n", Mix_PausedMusicStream(music)?"":" not");
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayingMusicStream},
@ref{Mix_PauseMusicStream},
@ref{Mix_ResumeMusicStream}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadingMusicStream
@subsection Mix_FadingMusicStream
@findex Mix_FadingMusicStream

@noindent
@code{Mix_Fading @b{Mix_FadingMusicStream}(Mix_Music *@var{music})}

@table @var
@item music
The music to get fading state.@*
@b{NULL} will get the currently playing music fading state.
@end table

@noindent
Tells you if @var{music} is fading in, out, or not at all.  Does not tell you if the channel is playing anything, or paused, so you'd need to test that separately.

@noindent
@b{Returns}: the fading status.  Never returns an error.

@cartouche
@example
// check the music fade status
switch(Mix_FadingMusicStream(music)) @{
    case MIX_NO_FADING:
        printf("Not fading music.\n");
        break;
    case MIX_FADING_OUT:
        printf("Fading out music.\n");
        break;
    case MIX_FADING_IN:
        printf("Fading in music.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Fading},
@ref{Mix_PausedMusicStream},
@ref{Mix_PlayingMusicStream},
@ref{Mix_FadeInMusicStreamPos},
@ref{Mix_FadeOutMusicStream}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicHookData
@subsection Mix_GetMusicHookData
@findex Mix_GetMusicHookData

@noindent
@code{void *@b{Mix_GetMusicHookData}()}

@noindent
Get the @var{arg} passed into @code{Mix_HookMusic}.

@noindent
@b{Returns}: the @var{arg} pointer.

@cartouche
@example
// retrieve the music hook data pointer
void *data;
data=Mix_GetMusicHookData();
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HookMusic}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PlayingMusic
@subsection Mix_PlayingMusic
@findex Mix_PlayingMusic

@noindent
@code{int @b{Mix_PlayingMusic}()}

@noindent
Tells you if any single-stream music is actively playing, or not.@*
@b{Note}: Does not check if the channel has been paused.

@noindent
@b{Returns}: Zero if the any single-stream music is not playing, or 1 if it is playing.

@cartouche
@example
// check if any single-stream music is playing
printf("music is%s playing.\n", Mix_PlayingMusic()?"":" not");
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PausedMusic},
@ref{Mix_FadingMusic},
@ref{Mix_PlayMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_PausedMusic
@subsection Mix_PausedMusic
@findex Mix_PausedMusic

@noindent
@code{int @b{Mix_PausedMusic}()}

@noindent
Tells you if music is paused, or not.@*
@b{Note}: Does not check if the music was been halted after it was paused, which may seem a little weird.

@noindent
@b{Returns}: Zero if music is not paused.  1 if it is paused.

@cartouche
@example
// check the music pause status
printf("music is%s paused\n", Mix_PausedMusic()?"":" not");
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_PlayingMusic},
@ref{Mix_PauseMusic},
@ref{Mix_ResumeMusic}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadingMusic
@subsection Mix_FadingMusic
@findex Mix_FadingMusic

@noindent
@code{Mix_Fading @b{Mix_FadingMusic}()}

@noindent
Tells you if music is fading in, out, or not at all.  Does not tell you if the channel is playing anything, or paused, so you'd need to test that separately.

@noindent
@b{Returns}: the fading status.  Never returns an error.

@cartouche
@example
// check the music fade status
switch(Mix_FadingMusic()) @{
    case MIX_NO_FADING:
        printf("Not fading music.\n");
        break;
    case MIX_FADING_OUT:
        printf("Fading out music.\n");
        break;
    case MIX_FADING_IN:
        printf("Fading in music.\n");
        break;
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_Fading},
@ref{Mix_PausedMusic},
@ref{Mix_PlayingMusic},
@ref{Mix_FadeInMusicPos},
@ref{Mix_FadeOutMusic}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicTitle
@subsection Mix_GetMusicTitle
@findex Mix_GetMusicTitle

@noindent
@code{const char *@b{Mix_GetMusicTitle}(const Mix_Music *@var{music})}

@noindent
Get @var{music} title from meta-tag if possible. If title tag is empty, filename will be returned unlike the @code{Mix_GetMusicTitleTag()} call.

@noindent
@b{Returns}: the @var{music} title string pointer.

@cartouche
@example
// retrieve the music title meta-tag
void *title;
title=Mix_GetMusicTitle(myMusic);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTitleTag},
@ref{Mix_GetMusicArtistTag},
@ref{Mix_GetMusicAlbumTag},
@ref{Mix_GetMusicCopyrightTag}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicTitleTag
@subsection Mix_GetMusicTitleTag
@findex Mix_GetMusicTitleTag

@noindent
@code{const char *@b{Mix_GetMusicTitleTag}(const Mix_Music *@var{music})}

@noindent
Get @var{music} title from meta-tag if possible. If title tag is empty, returns NULL

@noindent
@b{Returns}: the @var{music} title string pointer or NULL.

@cartouche
@example
// retrieve the music title meta-tag
void *title;
title=Mix_GetMusicTitleTag(myMusic);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTitle},
@ref{Mix_GetMusicArtistTag},
@ref{Mix_GetMusicAlbumTag},
@ref{Mix_GetMusicCopyrightTag}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicArtistTag
@subsection Mix_GetMusicArtistTag
@findex Mix_GetMusicArtistTag

@noindent
@code{const char *@b{Mix_GetMusicArtistTag}(const Mix_Music *@var{music})}

@noindent
Get @var{music} artist from meta-tag if possible. If artist tag is empty, returns NULL

@noindent
@b{Returns}: the @var{music} artist string pointer or NULL.

@cartouche
@example
// retrieve the music artist meta-tag
void *title;
title=Mix_GetMusicArtistTag(myMusic);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTitle},
@ref{Mix_GetMusicTitleTag},
@ref{Mix_GetMusicAlbumTag},
@ref{Mix_GetMusicCopyrightTag}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicAlbumTag
@subsection Mix_GetMusicAlbumTag
@findex Mix_GetMusicAlbumTag

@noindent
@code{const char *@b{Mix_GetMusicAlbumTag}(const Mix_Music *@var{music})}

@noindent
Get @var{music} album from meta-tag if possible. If album tag is empty, returns NULL

@noindent
@b{Returns}: the @var{music} album string pointer or NULL.

@cartouche
@example
// retrieve the music album meta-tag
void *title;
title=Mix_GetMusicAlbumTag(myMusic);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTitle},
@ref{Mix_GetMusicTitleTag},
@ref{Mix_GetMusicArtistTag},
@ref{Mix_GetMusicCopyrightTag}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetMusicCopyrightTag
@subsection Mix_GetMusicCopyrightTag
@findex Mix_GetMusicCopyrightTag

@noindent
@code{const char *@b{Mix_GetMusicCopyrightTag}(const Mix_Music *@var{music})}

@noindent
Get @var{music} copyright from meta-tag if possible. If copyright tag is empty, returns NULL

@noindent
@b{Returns}: the @var{music} copyright string pointer or NULL.

@cartouche
@example
// retrieve the music copyright meta-tag
void *title;
title=Mix_GetMusicCopyrightTag(myMusic);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicTitle},
@ref{Mix_GetMusicTitleTag},
@ref{Mix_GetMusicArtistTag},
@ref{Mix_GetMusicAlbumTag}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetTimidityCfg
@subsection Mix_SetTimidityCfg
@findex Mix_SetTimidityCfg

@noindent
@code{int @b{Mix_SetTimidityCfg}(const char *@var{path})}

@table @var
@item path
Timidity config file path.@*
Set the @b{NULL} to let Timidity use the default system paths by the internal logic.
@end table

@noindent
The Timidity cfg file path which defines the set of patches used by the Timidity during playback.@*
@b{Note}: Takes no effect when no MIDI music files currently loaded by Timidity. To apply the config path change
you should unload all MIDI music using @code{Mix_FreeMusic()} call and open them back again.
Timidity doesn't support individual different patch sets per song.

@noindent
@b{Returns}: 0 if success, -1 on failure.

@cartouche
@example
// change the timidity config path
Mix_SetTimidityCfg("/home/user/Music/timidity_patches/mybank.cfg");
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetTimidityCfg},
@ref{Mix_PausedMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetTimidityCfg
@subsection Mix_GetTimidityCfg
@findex Mix_GetTimidityCfg

@noindent
@code{const char *@b{Mix_GetTimidityCfg}()}

@noindent
Reports the full path to the current config file. NULL if no custom config paths was set.

@noindent
@b{Returns}: The full Timidity config file path or @b{NULL}.

@noindent
@b{See Also}:@*
@ref{Mix_SetTimidityCfg},
@ref{Mix_PausedMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayMusicStream}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GME_SetSpcEchoDisabled
@subsection Mix_GME_SetSpcEchoDisabled
@findex Mix_GME_SetSpcEchoDisabled

@noindent
@code{void @b{Mix_GME_SetSpcEchoDisabled}(Mix_Music *@var{music}, int *@var{disabled})}

@table @var
@item music
The music to change the "SPC echo disabled" option
@item disabled
The boolean 0 or 1 value
@end table

@noindent
This option allows you to disable the built-in echo in SPC files played via libGME (Game Music Emulators) library.

@noindent
@b{See Also}:@*
@ref{Mix_GME_GetSpcEchoDisabled},
@ref{Mix_PausedMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayMusicStream}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GME_GetSpcEchoDisabled
@subsection Mix_GME_GetSpcEchoDisabled
@findex Mix_GME_GetSpcEchoDisabled

@noindent
@code{int @b{Mix_GME_GetSpcEchoDisabled}(Mix_Music *@var{music})}

@table @var
@item music
The music to get the value of the "SPC echo disabled" option.
@end table

@noindent
@b{Returns}: The value of the "SPC echo disabled" option or -1 when option is unavailable for this music.

@noindent
This option allows you to disable the built-in echo in SPC files played via libGME (Game Music Emulators) library.

@noindent
@b{See Also}:@*
@ref{Mix_GME_SetSpcEchoDisabled},
@ref{Mix_PausedMusicStream},
@ref{Mix_FadingMusicStream},
@ref{Mix_PlayMusicStream}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_SetSoundFonts
@subsection Mix_SetSoundFonts
@findex Mix_SetSoundFonts

@noindent
@code{int @b{Mix_SetSoundFonts}(const char *@var{paths})}

@table @var
@item paths
Semicolon separated paths to sound font files.@*
@b{NULL} to use default sound font paths from environment.
@end table

@noindent
Set the paths list to sound font files will be used by FluidSynth MIDI backend.

@noindent
@b{Returns}: 1 if path successfully set, or 0 if error has occouped.

@cartouche
@example
if(Mix_SetSoundFonts("./myfonts/melodic.sf2;myfonts/drups.sf2")==0) @{
    printf("Mix_SetSoundFonts: %s\n", Mix_GetError());
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GetSoundFonts},
@ref{Mix_EachSoundFont},
@ref{Mix_EachSoundFontEx}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GetSoundFonts
@subsection Mix_GetSoundFonts
@findex Mix_GetSoundFonts

@noindent
@code{const char *@b{Mix_GetSoundFonts}()}

@table @var
@item paths
Semicolon separated paths to sound font files.@*
@b{NULL} to use default sound font paths from environment.
@end table

@noindent
Get the current set of paths list to sound font files will be used by
FluidSynth MIDI backend. If there are wasn't set by @ref{Mix_SetSoundFonts}
function, there are will be tooken from @b{SDL_SOUNDFONTS} or
@b{SDL_FORCE_SOUNDFONTS} environment variables.

@noindent
@b{Returns}: Semicolon-separated sound font paths.

@cartouche
@example
//Print list of available sound fonts
char *context, *path = NULL;
char *fonts = Mix_GetSoundFonts();
printf("Available sound fonts:\n");
for(path = strtok_r(fonts, ";", &context); path; path = strtok_r(NULL, ";", &context)) @{
    printf(" - %s\n", path);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetSoundFonts},
@ref{Mix_EachSoundFont},
@ref{Mix_EachSoundFontEx}


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_EachSoundFont
@subsection Mix_EachSoundFont
@findex Mix_EachSoundFont

@noindent
@code{const char *@b{Mix_EachSoundFont}(int (*@var{function})(const char *, void *), void *@var{data})}

@table @var
@item function
The callback function will be called for each sound font
listed in the paths. Has arguments @var{path} and @var{data}.
@item data
User data passed to the callback
@end table

@noindent
Iterate the current set of paths list to sound font files will be used by
FluidSynth MIDI backend. If there are wasn't set by @ref{Mix_SetSoundFonts}
function, there are will be tooken from @b{SDL_SOUNDFONTS} or
@b{SDL_FORCE_SOUNDFONTS} environment variables.

@noindent
@b{Returns}: 1 if function successfully completed, or 0 if error has occouped.

@cartouche
@example
int print_sound_font(const char *path, void *data) @{
    printf(" - %s\n", path);
    return 1;
@}

//...

//Print list of available sound fonts
char *fonts = Mix_GetSoundFonts();
printf("Available sound fonts:\n");
for(!Mix_EachSoundFont(print_sound_font, NULL)) @{
    printf(" - %s\n", path);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetSoundFonts},
@ref{Mix_GetSoundFonts},
@ref{Mix_EachSoundFontEx}



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_EachSoundFontEx
@subsection Mix_EachSoundFontEx
@findex Mix_EachSoundFontEx

@noindent
@code{const char *@b{Mix_EachSoundFontEx}(const char* @var{cpaths}, int (*@var{function})(const char *, void *), void *@var{data})}

@table @var
@item cpaths
The semicolon-separated list of custom SoundFont file paths
@item function
The callback function will be called for each sound font
listed in the paths. Has arguments @var{path} and @var{data}.
@item data
User data passed to the callback
@end table

@noindent
Iterate the current set of internal paths list to sound font files will be used by
FluidSynth MIDI backend, and additionally, iterate through the custom paths list given by the @var{cpaths} argument.
If there are wasn't set by @ref{Mix_SetSoundFonts}
function, there are will be tooken from @b{SDL_SOUNDFONTS} or
@b{SDL_FORCE_SOUNDFONTS} environment variables.

@noindent
@b{Returns}: 1 if function successfully completed, or 0 if error has occouped.

@cartouche
@example
int print_sound_font(const char *path, void *data) @{
    printf(" - %s\n", path);
    return 1;
@}

//...

//Print list of available sound fonts
char *fonts = Mix_GetSoundFonts();
char *other_fonts = "/path/to/font1.sf2:/path/to/font2.sf2:/path/to/fontN.sf2";
printf("Available sound fonts:\n");
for(!Mix_EachSoundFontEx(other_fonts, print_sound_font, NULL)) @{
    printf(" - %s\n", path);
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_SetSoundFonts},
@ref{Mix_GetSoundFonts},
@ref{Mix_EachSoundFont}




@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getTotalBanks
@subsection Mix_ADLMIDI_getTotalBanks
@findex Mix_ADLMIDI_getTotalBanks

@noindent
@code{int @b{Mix_ADLMIDI_getTotalBanks}()}

@noindent
@b{Returns}: Total count of embedded ADLMIDI banks.

@noindent
Get total count of available embedded banks.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getBankNames
@subsection Mix_ADLMIDI_getBankNames
@findex Mix_ADLMIDI_getBankNames

@noindent
@code{const char *const * @b{Mix_ADLMIDI_getBankNames}()}

@noindent
@b{Returns}: array of strings are names of embedded ADLMIDI banks.

@noindent
Get array of embedded bank titles.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getBankID
@subsection Mix_ADLMIDI_getBankID
@findex Mix_ADLMIDI_getBankID

@noindent
@code{int @b{Mix_ADLMIDI_getBankID}()}

@noindent
@b{Returns}: currently using ID of embedded ADLMIDI bank.

@noindent
Get currently using ID of embedded ADLMIDI bank.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setBankID
@subsection Mix_ADLMIDI_setBankID
@findex Mix_ADLMIDI_setBankID

@noindent
@code{void @b{Mix_ADLMIDI_setBankID}(int @var{bnk})}

@table @var
@item bnk
Embedded ADLMIDI bank ID
@end table

@noindent
Change current embedded ADLMIDI bank.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getTremolo
@subsection Mix_ADLMIDI_getTremolo
@findex Mix_ADLMIDI_getTremolo

@noindent
@code{int @b{Mix_ADLMIDI_getTremolo}()}

@noindent
@b{Returns}: 0 if Deep Tremolo is inactive, or 1 if Deep Tremolo is activated.

@noindent
Get current state of "Deep Tremolo" OPL3 flag in ADLMIDI.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setTremolo
@subsection Mix_ADLMIDI_setTremolo
@findex Mix_ADLMIDI_setTremolo

@noindent
@code{void @b{Mix_ADLMIDI_setTremolo}(int @var{tr})}

@table @var
@item tr
State of Deep Tremolo flag:
0 if Deep Tremolo is inactive, or 1 if Deep Tremolo is activated
@end table

@noindent
Set state of "Deep Tremolo" OPL3 flag.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getVibrato
@subsection Mix_ADLMIDI_getVibrato
@findex Mix_ADLMIDI_getVibrato

@noindent
@code{int @b{Mix_ADLMIDI_getVibrato}()}

@noindent
@b{Returns}: 0 if Deep Vibrato is inactive, or 1 if Deep Vibrato is activated.

@noindent
Get current state of "Deep Vibrato" OPL3 flag in ADLMIDI.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setVibrato
@subsection Mix_ADLMIDI_setVibrato
@findex Mix_ADLMIDI_setVibrato

@noindent
@code{void @b{Mix_ADLMIDI_setVibrato}(int @var{vib})}

@table @var
@item vib
State of Deep Vibrato flag:
0 if Deep Vibrato is inactive, or 1 if Deep Vibrato is activated
@end table

@noindent
Set state of "Deep Vibrato" OPL3 flag.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getScaleMod
@subsection Mix_ADLMIDI_getScaleMod
@findex Mix_ADLMIDI_getScaleMod

@noindent
@code{int @b{Mix_ADLMIDI_getScaleMod}()}

@noindent
@b{Returns}: 0 if Scalable Modulation is inactive, or 1 if Scalable Modulation is activated.

@noindent
Get current state of "Scalable modulation mode" flag


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setScaleMod
@subsection Mix_ADLMIDI_setScaleMod
@findex Mix_ADLMIDI_setScaleMod

@noindent
@code{void @b{Mix_ADLMIDI_setScaleMod}(int @var{sc})}

@table @var
@item sc
State of Scalable Modulation flag:
0 if Scalable Modulation is inactive, or 1 if Scalable Modulation is activated
@end table

@noindent
Turn on/off scalable modulation mode flag.
@b{NOTE}: Applies on MIDI file reopen


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getVolumeModel
@subsection Mix_ADLMIDI_getVolumeModel
@findex Mix_ADLMIDI_getVolumeModel

@noindent
@code{int @b{Mix_ADLMIDI_getVolumeModel}()}

@noindent
@b{Returns}: value of @b{Mix_ADLMIDI_VolumeModel} enum which a current volume model.

@noindent
Get ID of current volumes model of ADLMIDI


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setVolumeModel
@subsection Mix_ADLMIDI_setVolumeModel
@findex Mix_ADLMIDI_setVolumeModel

@noindent
@code{void @b{Mix_ADLMIDI_setVolumeModel}(int @var{vm})}

@table @var
@item vm
Value of @b{Mix_ADLMIDI_VolumeModel} enum.
@end table

@noindent
Change current volume model.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getFullRangeBrightness
@subsection Mix_ADLMIDI_getFullRangeBrightness
@findex Mix_ADLMIDI_getFullRangeBrightness

@noindent
@code{int @b{Mix_ADLMIDI_getFullRangeBrightness}()}

@noindent
@b{Returns}: 0 when full-ranged CC74 is disabled, or 1 when full-ranged mode of CC74 is enabled

@noindent
Get full range mode for CC74-Brightness controller

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setFullRangeBrightness
@subsection Mix_ADLMIDI_setFullRangeBrightness
@findex Mix_ADLMIDI_setFullRangeBrightness

@noindent
@code{void @b{Mix_ADLMIDI_setFullRangeBrightness}(int @var{frb})}

@table @var
@item frb
0 to disable full-ranged CC74, or 1 to enable full-ranged mode of CC74
@end table

@noindent
Set full range mode for CC74-Brightness controller
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getAutoArpeggio
@subsection Mix_ADLMIDI_getAutoArpeggio
@findex Mix_ADLMIDI_getAutoArpeggio

@noindent
@code{int @b{Mix_ADLMIDI_getAutoArpeggio}()}

@noindent
@b{Returns}: 0 when automatic arpeggio disabled, or 1 when automatic arpeggio is enabled

@noindent
Get the automatic apreggion enable/disable setting state

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setAutoArpeggio
@subsection Mix_ADLMIDI_setAutoArpeggio
@findex Mix_ADLMIDI_setAutoArpeggio

@noindent
@code{void @b{Mix_ADLMIDI_setAutoArpeggio}(int @var{aa_en})}

@table @var
@item aa_en
0 to disable the automatic arpeggio, or 1 to enable automatic arpeggio
@end table

@noindent
Set the automatic apreggion enable/disable setting state
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getFullPanStereo
@subsection Mix_ADLMIDI_getFullPanStereo
@findex Mix_ADLMIDI_getFullPanStereo

@noindent
@code{int @b{Mix_ADLMIDI_getFullPanStereo}()}

@noindent
@b{Returns}: 0 when full panning stereo is disabled, or 1 when full panning stereo is enabled

@noindent
Get full panning stereo mode

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setFullPanStereo
@subsection Mix_ADLMIDI_setFullPanStereo
@findex Mix_ADLMIDI_setFullPanStereo

@noindent
@code{void @b{Mix_ADLMIDI_setFullPanStereo}(int @var{fp})}

@table @var
@item fp
0 to disable full panning stereo, or 1 to enable full panning stereo
@end table

@noindent
Set full panning stereo mode
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getEmulator
@subsection Mix_ADLMIDI_getEmulator
@findex Mix_ADLMIDI_getEmulator

@noindent
@code{int @b{Mix_ADLMIDI_getEmulator}()}

@noindent
@b{Returns}: value of @b{Mix_ADLMIDI_Emulator} enum which a current OPL3 emulator.

@noindent
Get ID of current OPL3 emulator of ADLMIDI


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setEmulator
@subsection Mix_ADLMIDI_setEmulator
@findex Mix_ADLMIDI_setEmulator

@noindent
@code{void @b{Mix_ADLMIDI_setVolumeModel}(int @var{emu})}

@table @var
@item emu
Value of @b{Mix_ADLMIDI_Emulator} enum.
@end table

@noindent
Select the default OPL3 Emulator for ADLMIDI used for every new MIDI file opened.@*
@b{Note:} Using path arguments may override this setting.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_getChipsCount
@subsection Mix_ADLMIDI_getChipsCount
@findex Mix_ADLMIDI_getChipsCount

@noindent
@code{int @b{Mix_ADLMIDI_getChipsCount}()}

@noindent
@b{Returns}: initial number of emulated chips running by ADLMIDI.

@noindent
Get the number of emulated chips used by ADLMIDI for every new MIDI file opened.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setChipsCount
@subsection Mix_ADLMIDI_setChipsCount
@findex Mix_ADLMIDI_setChipsCount

@noindent
@code{void @b{Mix_ADLMIDI_setChipsCount}(int @var{chips})}

@table @var
@item chips
Number of emulated chips.
@end table

@noindent
Get the number of emulated chips used by ADLMIDI for every new MIDI file opened.@*
@b{Note:} Using path arguments may override this setting.



@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setSetDefaults
@subsection Mix_ADLMIDI_setSetDefaults
@findex Mix_ADLMIDI_setSetDefaults

@noindent
@code{void @b{Mix_ADLMIDI_setSetDefaults}()}

@noindent
Resets all settings of ADLMIDI into default state.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ADLMIDI_setCustomBankFile
@subsection Mix_ADLMIDI_setCustomBankFile
@findex Mix_ADLMIDI_setCustomBankFile

@noindent
@code{void @b{Mix_ADLMIDI_setCustomBankFile}(const char *@var{bank_wonl_path})}

@table @var
@item bank_wonl_path
Path to custom WOPL bank or NULL to use embedded banks.
@end table

@noindent
Sets path to custom WOPL bank file.
@b{NOTE}: Applies on MIDI file reopen

@cartouche
@example
//Set custom ADLMIDI bank
Mix_ADLMIDI_setCustomBankFile("./music/my-gm-bank.wonl");
@end example
@end cartouche

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getVolumeModel
@subsection Mix_OPNMIDI_getVolumeModel
@findex Mix_OPNMIDI_getVolumeModel

@noindent
@code{int @b{Mix_OPNMIDI_getVolumeModel}()}

@noindent
@b{Returns}: value of @b{Mix_OPNMIDI_VolumeModel} enum which a current volume model.

@noindent
Get ID of current volumes model of OPNMIDI


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setVolumeModel
@subsection Mix_OPNMIDI_setVolumeModel
@findex Mix_OPNMIDI_setVolumeModel

@noindent
@code{void @b{Mix_OPNMIDI_setVolumeModel}(int @var{vm})}

@table @var
@item vm
Value of @b{Mix_OPNMIDI_VolumeModel} enum.
@end table

@noindent
Change current volume model.
@b{NOTE}: Applies on MIDI file reopen


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getFullRangeBrightness
@subsection Mix_OPNMIDI_getFullRangeBrightness
@findex Mix_OPNMIDI_getFullRangeBrightness

@noindent
@code{int @b{Mix_OPNMIDI_getFullRangeBrightness}()}

@noindent
@b{Returns}: 0 when full-ranged CC74 is disabled, or 1 when full-ranged mode of CC74 is enabled

@noindent
Get full range mode for CC74-Brightness controller

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setFullRangeBrightness
@subsection Mix_OPNMIDI_setFullRangeBrightness
@findex Mix_OPNMIDI_setFullRangeBrightness

@noindent
@code{void @b{Mix_OPNMIDI_setFullRangeBrightness}(int @var{frb})}

@table @var
@item frb
0 to disable full-ranged CC74, or 1 to enable full-ranged mode of CC74
@end table

@noindent
Set full range mode for CC74-Brightness controller
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getAutoArpeggio
@subsection Mix_OPNMIDI_getAutoArpeggio
@findex Mix_OPNMIDI_getAutoArpeggio

@noindent
@code{int @b{Mix_OPNMIDI_getAutoArpeggio}()}

@noindent
@b{Returns}: 0 when automatic arpeggio disabled, or 1 when automatic arpeggio is enabled

@noindent
Get the automatic apreggion enable/disable setting state

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setAutoArpeggio
@subsection Mix_OPNMIDI_setAutoArpeggio
@findex Mix_OPNMIDI_setAutoArpeggio

@noindent
@code{void @b{Mix_OPNMIDI_setAutoArpeggio}(int @var{aa_en})}

@table @var
@item aa_en
0 to disable the automatic arpeggio, or 1 to enable automatic arpeggio
@end table

@noindent
Set the automatic apreggion enable/disable setting state
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getFullPanStereo
@subsection Mix_OPNMIDI_getFullPanStereo
@findex Mix_OPNMIDI_getFullPanStereo

@noindent
@code{int @b{Mix_OPNMIDI_getFullPanStereo}()}

@noindent
@b{Returns}: 0 when full panning stereo is disabled, or 1 when full panning stereo is enabled

@noindent
Get full panning stereo mode

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setFullPanStereo
@subsection Mix_OPNMIDI_setFullPanStereo
@findex Mix_OPNMIDI_setFullPanStereo

@noindent
@code{void @b{Mix_OPNMIDI_setFullPanStereo}(int @var{fp})}

@table @var
@item fp
0 to disable full panning stereo, or 1 to enable full panning stereo
@end table

@noindent
Set full panning stereo mode
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getEmulator
@subsection Mix_OPNMIDI_getEmulator
@findex Mix_OPNMIDI_getEmulator

@noindent
@code{int @b{Mix_OPNMIDI_getEmulator}()}

@noindent
@b{Returns}: value of @b{Mix_OPNMIDI_Emulator} enum which a current OPN2 emulator.

@noindent
Get ID of current OPN2 emulator of OPNMIDI

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setEmulator
@subsection Mix_OPNMIDI_setEmulator
@findex Mix_OPNMIDI_setEmulator

@noindent
@code{void @b{Mix_OPNMIDI_setVolumeModel}(int @var{emu})}

@table @var
@item emu
Value of @b{Mix_OPNMIDI_Emulator} enum.
@end table

@noindent
Select the OPN2 Emulator for OPNMIDI
@b{NOTE}: Applies on MIDI file reopen


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_getChipsCount
@subsection Mix_OPNMIDI_getChipsCount
@findex Mix_OPNMIDI_getChipsCount

@noindent
@code{int @b{Mix_OPNMIDI_getChipsCount}()}

@noindent
@b{Returns}: initial number of emulated chips running by OPNMIDI.

@noindent
Get the number of emulated chips used by OPNMIDI for every new MIDI file opened.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setChipsCount
@subsection Mix_OPNMIDI_setChipsCount
@findex Mix_OPNMIDI_setChipsCount

@noindent
@code{void @b{Mix_OPNMIDI_setChipsCount}(int @var{chips})}

@table @var
@item chips
Number of emulated chips.
@end table

@noindent
Get the number of emulated chips used by OPNMIDI for every new MIDI file opened.@*
@b{Note:} Using path arguments may override this setting.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setSetDefaults
@subsection Mix_OPNMIDI_setSetDefaults
@findex Mix_OPNMIDI_setSetDefaults

@noindent
@code{void @b{Mix_OPNMIDI_setSetDefaults}()}

@noindent
Resets all settings of OPNMIDI into default state.
@b{NOTE}: Applies on MIDI file reopen

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_OPNMIDI_setCustomBankFile
@subsection Mix_OPNMIDI_setCustomBankFile
@findex Mix_OPNMIDI_setCustomBankFile

@noindent
@code{void @b{Mix_OPNMIDI_setCustomBankFile}(const char *@var{bank_wonp_path})}

@table @var
@item bank_wonp_path
Path to custom WOPN bank or NULL to use default bank.
@end table

@noindent
Sets path to custom WOPN bank file.
@b{NOTE}: Applies on MIDI file reopen

@cartouche
@example
//Set custom OPNMIDI bank
Mix_OPNMIDI_setCustomBankFile("./music/my-gm-bank.wonp");
@end example
@end cartouche


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Music Arguments
@subsection Music Arguments
@findex Music Arguments

@noindent
Also known as a @b{Path arguments}. This is a special formatted string that can be concoctated with the music file path using the @b{|} separator,
or being passed as a dedicated argument. There are individual music properties given to it during the load time.
Using these arguments you can choose the track to play (suitable for files that contains multiple songs inside the same file), or select
the MIDI synthesizer or its porperties and a banks or SoundFont paths, etc.@*

@table @b
Depending on the music format and the codec library there are different arguments supported
@item Game music emulators
The first argument - an integer from 0 to n - a number of the track from multi-track file formats like NSF, NSFE, HES, GBS, etc.@*

Example 1 of the music path with music arguments given:
@cartouche
@example
/path/to/mymusic.nsf|21
@end example
@end cartouche

Example 2 of the music path with music arguments given:
@cartouche
@example
/path/to/mymusic.nsf|21;g=1.0;t=1.0;
@end example
@end cartouche

Example music arguments strings to be sent as a dedicated argument:
@cartouche
@example
21;g=1.0;t=1.0;
@end example
@end cartouche

All arguments after the first integer are optional. The leading integer is required, even it's a single-track file. The last argument must be closed with semicolon.@*
@table @b
@item t=
Initial tempo factor (1.0 is the default value, accepting positive floating-point number values, for example, @code{t=1.75;}), increase or decrease the initial tempo of the song.
@item g=
Gain factor (1.0 is the default value, accepting positive floating-point number values, for example, @code{g=1.75;}), increase or decrease the volume level of the song. Use it to increase the volume of too silent songs, or decrease the volume of too loud songs.
@end table

@item MIDI
Accepts a list of letter-marked integer arguments separated by semicolons.@*

Example 1 of the music path with music arguments given:
@cartouche
@example
mymusic.mid|s0;b62;t0;v0;a0;m0;t=1.0;g=2.0;x=/path/to/bank1.wopl;
@end example
@end cartouche

Example 2 of the music path with music arguments given:
@cartouche
@example
mymusic.mid|s4;r1;rr0.2;rd0.4;rw0.9;rl0.8;c1;cn10;cl4.2;cs3.5;p256;t=1.0;g=1.0;x=/path/to/bank1.sf2&/path/to/bank2.sf2&/path/to/bank3.sf2;
@end example
@end cartouche

Example music arguments strings to be sent as a dedicated argument:
@cartouche
@example
s0;b62;t0;v0;a0;m0;t=1.0;g=2.0;x=/path/to/bank1.wopl;
@end example
@end cartouche

@noindent
All arguments are optional. The last argument must be closed with semicolon.@*

@table @b
@item s
@b{Synthesizer type:}@*
    @code{0} - ADLMIDI, emulated OPL3 (YMF262) synthesizer with loop tags and System Exclusive Messages support. Works by Default. OPL3 chip was widely used on PC sound cards in 80/90'th years.@*
    @code{1} - Timidity, requires the set of patches to be properly installed (can be customized with @ref{Mix_SetTimidityCfg} function).@*
    @code{2} - Native MIDI, uses the default operating system MIDI interface.@*
    @code{3} - OPNMIDI, emulated OPN2 (YM2612) synthesizer with loop tags and System Exclusive Messages support. OPN2 chip is used on the Sega MegaDrive / Genesis game console.@*
    @code{4} - FluidSynth, the WaveTable MIDI synthesizer with SoundFont banks support, has the support for loop tags support.@*
    @code{5} - Emu De Midi, emulated OPLL and SCC synthesizer, has the support for loop tags support.@*

    @noindent
    Example:
    @example
    @code{s3;}
    @end example

@item General flags:
@table @b
@item t=
    @b{ADLMIDI, OPNMIDI, FluidSynth, and Emu De Midi}@*
    Initial tempo factor (1.0 is the default value, accepting positive floating-point number values, for example, @code{t=1.75;}), increase or decrease the initial tempo of the song. Don't confuse with @code{t0} and @code{t1} which is a different setting.

    @noindent
    Example:
    @example
    @code{t=1.4;}
    @end example
@item g=
    @b{ADLMIDI, OPNMIDI, FluidSynth, and Emu De Midi}@*
    Gain factor (2.0 is the default value, accepting positive floating-point number values, for example, @code{g=1.75;}), increase or decrease the volume level of the song. Use it to increase the volume of too silent songs, or decrease the volume of too loud songs.

    @noindent
    Example:
    @example
    @code{g=5.5;}
    @end example
@end table

@item ADLMIDI and OPNMIDI:
@table @b
@item b
    @b{ADLMIDI}@*
    Set bank ID (look for available banks list into PGE MusPlay application to preview them). Default is 58.

    @noindent
    Example:
    @example
    @code{b72;}
    @end example

@item t
    @b{ADLMIDI}@*
    Deep tremolo (1 or 0, or -1 an auto-mode), increase the amplitude of tremolo effect for instruments that are using tremolo OPL flag. Default -1. Don't confuse with @code{t=} which is a different setting.

    @noindent
    Example:
    @example
    @code{t1;}
    @end example

@item v
    @b{ADLMIDI}@*
    Deep vibrato (1 or 0, or -1 an auto-mode), increase the amplitude of vibrato effect for instruments that are using vibrato OPL flag. Default -1.

    @noindent
    Example:
    @example
    @code{v1;}
    @end example

@item m
    @b{ADLMIDI}@*
    Enables scalable modulation (1 or 0), Allows dynamic scaling of the modulator result with volume. Default 0.

    @noindent
    Example:
    @example
    @code{m1;}
    @end example

@item c
    @b{ADLMIDI AND OPNMIDI}@*
    Count of chip emulators are allowing to excite limit of voice channels. Default 4 for ADLMIDI and 8 for OPNMIDI. Allowed value from 1 to 100.

    @noindent
    Example:
    @example
    @code{c2;}
    @end example

@item f
    @b{ADLMIDI}@*
    Count of four-operator channels between all chip emulators (6 channels maximum per every chip. For example, you have used 2 chips, you can have 12 four-op channels maximum).

    @noindent
    Example:
    @example
    @code{f8;}
    @end example

@item j
    @b{ADLMIDI AND OPNMIDI}@*
    Enable or disable the automatic arpeggio (1 or 0). Default 1.

    @noindent
    Example:
    @example
    @code{j0;}
    @end example

@item l
    @b{ADLMIDI AND OPNMIDI}@*
    Volume scaling model code (0 - auto, 1 - Generic, - 2 OPL3-Native, 3 - DMX, 4 - Apogee, - 5 - Win9X-like) - an algorithm to scale a volume level, affects music expressionism.

    @noindent
    Example:
    @example
    @code{l1;}
    @end example

@item r
    @b{ADLMIDI AND OPNMIDI}@*
    Use full-ranged CC74 Brightness MIDI controller (1 or 0). Default 0.

    @noindent
    Example:
    @example
    @code{r1;}
    @end example

@item p
    @b{ADLMIDI AND OPNMIDI}@*
    Enable full-panning stereo support (1 or 0). Default 1.

    @noindent
    Example:
    @example
    @code{p0;}
    @end example

@item e
    @b{ADLMIDI}@*
    Choose OPL3 emulator: 0 - Nuked OPL3 (Very accurate, may lag on older CPUs), 1 - Nuked OPL3 1.7.4 that was optimized by Troosh, and 2 - DosBox 0.74 (Well-accurate, fastest).

    @noindent
    Example:
    @example
    @code{e2;}
    @end example

@item e
    @b{OPNMIDI}@*
    Choose OPN2 emulator: 0 - Mame YM2612 (Well-accurate, fast), 1 - Nuked OPN2 (Very accurate, requires VERY powerful CPU. Suggested to use up to 2 chips max with it), 2 - GENS 2.10 (Very outdated, inaccurate, but fastest)

    @noindent
    Example:
    @example
    @code{e2;}
    @end example

@item x=
    @b{ADLMIDI and OPNMIDI}@*
    Load custom bank file by absolute path (WOPN bank for OPNMIDI or WOPL for ADLMIDI). Accepting strings without quotes.

    @noindent
    Example:
    @example
    @code{x=/path/to/bank/file.wopn;}
    @end example
@end table

@item FluidSynth:
@table @b
@item r
    @b{FluidSynth}@*
    Enable or disable the reverb effect: 0 - disabled, 1 - enabled.

    @noindent
    Example:
    @example
    @code{r1;}
    @end example

@item rr
    @b{FluidSynth}@*
    Reverb room size value (0.0-1.0).

    @noindent
    Example:
    @example
    @code{rr0.2;}
    @end example

@item rd
    @b{FluidSynth}@*
    Reverb damping value (0.0-1.0).

    @noindent
    Example:
    @example
    @code{rd0.4;}
    @end example

@item rw
    @b{FluidSynth}@*
    Reverb width value (0.0-100.0).

    @noindent
    Example:
    @example
    @code{rw0.9;}
    @end example

@item rl
    @b{FluidSynth}@*
    Reverb level value (0.0-1.0).

    @noindent
    Example:
    @example
    @code{rl0.8;}
    @end example

@item c
    @b{FluidSynth}@*
    Enable or disable the chorus effect: 0 - disabled, 1 - enabled.

    @noindent
    Example:
    @example
    @code{c1;}
    @end example

@item cn
    @b{FluidSynth}@*
    Chorus voice count (0-99, CPU time consumption proportional to this value).

    @noindent
    Example:
    @example
    @code{cn10;}
    @end example

@item cl
    @b{FluidSynth}@*
    Chorus level (0.0-10.0).

    @noindent
    Example:
    @example
    @code{cl4;}
    @end example

@item cs
    @b{FluidSynth}@*
    Chorus speed in Hz (0.1-5.0).

    @noindent
    Example:
    @example
    @code{cs3.5;}
    @end example

@item cd
    @b{FluidSynth}@*
    Chorus depth (max value depends on synth sample-rate, 0.0-21.0 is safe for sample-rate values up to 96KHz).

    @noindent
    Example:
    @example
    @code{cd10.1;}
    @end example

@item ct
    @b{FluidSynth}@*
    Chorus waveform type: 0 - Sine, 1 - Triangle.

    @noindent
    Example:
    @example
    @code{ct1;}
    @end example

@item p
    @b{FluidSynth}@*
    Define the allowed polyphony (8-512).

    @noindent
    Example:
    @example
    @code{p256;}
    @end example

@item x=
    @b{FluidSynth}@*
    Load custom SoundFont files by absolute path. Accepting strings without quotes, for example, @code{x=/path/to/bank/file.sf2;}. You can specify multiple SoundFont files by using an ampersand separator: @code{x=/p/file1.sf2&/p/file2.sf2&/p/filen.sf2;}

    @noindent
    Example:
    @example
    @code{x=/p/file1.sf2&/p/file2.sf2&/p/filen.sf2;}
    @end example

@end table

@end table

@item OGG Vorbis
Available since the 2th of June 2023. This functionality right now is avilable when the library was built with using of @b{stb_vorbis} library.

Turning multi-channel OGG file into multi-track music (will be possible to use the @ref{Mix_GetMusicTracks}() and @ref{Mix_SetMusicTrackMute}() functions):
@cartouche
@example
mymusic.ogg|m1;c2;r1;s=1.0;
@end example
@end cartouche

@noindent
All arguments after the first integer are optional. The leading integer is required, even it's a single-track file. The last argument must be closed with semicolon.@*

@table @b
@item m
Enable the multi-track mode: turn multi-channel song into multi-track stream with an ability to mute each separated "track". 0 - disabled, 1 - enabled.
@item c
Number of channels for each track. (Max is 8 due to SDL AudioStream)
@item r
Total number of available tracks.
@item s=
Initial speed factor (1.0 is the default value, accepting positive floating-point number values, for example, `s=1.75;`), increase or decrease the initial speed of the song (i.e. both tempo and pitch gets changed).
@end table

@end table


@noindent
@b{See Also}:@*
@ref{Mix_LoadMUS},
@ref{Mix_LoadMUS_RW_ARG},
@ref{Mix_LoadMUSType_RW_ARG}
