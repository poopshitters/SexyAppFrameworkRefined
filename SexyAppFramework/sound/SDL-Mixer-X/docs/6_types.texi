@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c =============================================================================
@node Types
@chapter Types

These types are defined and used by the SDL_mixer API.

@menu
* Mix_Chunk::               The internal format for an audio chunk
* Mix_Music::               The internal format for a music chunk
* Mix_MusicType::           Music type enumerations
* Mix_MIDI_Device::         MIDI sequencer type enumerations @b{[Mixer X]}
* Mix_ADLMIDI_VolumeModel:: Volume model of libADLMIDI MIDI sequencer @b{[Mixer X]}
* Mix_ADLMIDI_Emulator::    OPL3 chip emulators used by ADLMIDI @b{[Mixer X]}
* Mix_OPNMIDI_VolumeModel:: Volume model of libOPNMIDI MIDI sequencer @b{[Mixer X]}
* Mix_OPNMIDI_Emulator::    OPN2 chip emulators used by OPNMIDI @b{[Mixer X]}
* Mix_Fading::              Fader effect type enumerations
* Mix_EffectFunc_t::        Special channel effect callback function pointer
* Mix_EffectDone_t::        Special channel effect done callback function pointer
* Mix_MusicEffectFunc_t::   Special music effect callback function pointer
* Mix_MusicEffectDone_t::   Special music effect done callback function pointer
* Mix_CommonMixer_t::       Common mixer function pointer
@end menu

@c -----------------------------------------------------------------------------
@page
@node Mix_Chunk
@section Mix_Chunk
@tindex Mix_Chunk

@cartouche
@example
typedef struct Mix_Chunk @{
    int @var{allocated};
    Uint8 *@var{abuf};
    Uint32 @var{alen};
    Uint8 @var{volume};     /* Per-sample volume, 0-128 */
@} Mix_Chunk;
@end example
@end cartouche

@table @var
@item allocated
a boolean indicating whether to free @var{abuf} when the chunk is freed.@*
0 if the memory was not allocated and thus not owned by this chunk.@*
1 if the memory was allocated and is thus owned by this chunk.
@item abuf
Pointer to the sample data, which is in the output format and sample rate.
@item alen
Length of @var{abuf} in bytes.
@item volume
0 = silent, 128 = max volume.  This takes effect when mixing.
@end table

@noindent
The internal format for an audio chunk.
This stores the sample data, the length in bytes of that data, and the volume to use
when mixing the sample.

@noindent
@b{See Also}:@*
@ref{Mix_VolumeChunk},
@ref{Mix_GetChunk},
@ref{Mix_LoadWAV},
@ref{Mix_LoadWAV_RW},
@ref{Mix_FreeChunk},
@ref{Mix_Music}

@c -----------------------------------------------------------------------------
@page
@node Mix_Music
@section Mix_Music
@tindex Mix_Music

@cartouche
@example
typedef struct _Mix_Music Mix_Music;
@end example
@end cartouche

This is an opaque data type used for Music data.
This should always be used as a pointer.
Who knows why it isn't a pointer in this typedef...

@noindent
@b{See Also}:@*
@ref{Mix_LoadMUS},
@ref{Mix_FreeMusic},
@ref{Mix_Chunk}

@c -----------------------------------------------------------------------------
@page
@node Mix_MusicType
@section Mix_MusicType
@tindex Mix_MusicType

@cartouche
@example
typedef enum @{
    MUS_NONE,
    MUS_CMD,
    MUS_WAV,
    MUS_MOD,
    MUS_MID,
    MUS_OGG,
    MUS_MP3,
    MUS_MP3_MAD_UNUSED,
    MUS_FLAC,
    MUS_MODPLUG_UNUSED,
    MUS_OPUS,
    /* MixerX specific codecs starts with 100 */
    MUS_GME = 100,
    /* Special cases to play formats IMF, MUS, or XMI are can't be played without specific MIDI libraries */
    MUS_ADLMIDI = 200,
    MUS_OPNMIDI,
    MUS_FLUIDLITE,
    MUS_EDMIDI,
    MUS_NATIVEMIDI
@} Mix_MusicType;
@end example
@end cartouche

Return values from @code{Mix_GetMusicType} are of these enumerated values.@*
If no music is playing then @b{MUS_NONE} is returned.@*
If music is playing via an external command then @b{MUS_CMD} is returned.@*
If music is playing via an Game Music Emulators then @b{MUS_GME} is returned.@*
@b{MUS_SPC} is legacy value added as single SPC playing support before GME was added. Use @b{MUS_GME} instead.@*
@b{MUS_KnownCodecs} is a count of known music codecs. Used internally.@*
Otherwise they are self explanatory.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicType}

@c -----------------------------------------------------------------------------
@page
@node Mix_MIDI_Device
@section Mix_MIDI_Device
@tindex Mix_MIDI_Device

@cartouche
@example
typedef enum @{
    MIDI_ADLMIDI,
    MIDI_Native,
    MIDI_Timidity,
    MIDI_OPNMIDI,
    MIDI_Fluidsynth,
    MIDI_ANY,
    MIDI_KnownDevices   /* Count of MIDI device types */
@} Mix_MIDI_Device;
@end example
@end cartouche

@c Return values from @code{Mix_GetMusicType} are of these enumerated values.@* @cNOT IMPLEMENTED YET
@b{MIDI_KnownDevices} is a count of known MIDI sequencers. Used internally.@*
Otherwise they are self explanatory.

@c -----------------------------------------------------------------------------
@page
@node Mix_ADLMIDI_VolumeModel
@section Mix_ADLMIDI_VolumeModel
@tindex Mix_ADLMIDI_VolumeModel

@cartouche
@example
typedef enum @{
    ADLMIDI_VM_AUTO,
    ADLMIDI_VM_GENERIC,
    ADLMIDI_VM_CMF,
    ADLMIDI_VM_DMX,
    ADLMIDI_VM_APOGEE,
    ADLMIDI_VM_9X,
    ADLMIDI_VM_DMX_FIXED,
    ADLMIDI_VM_APOGEE_FIXED,
    ADLMIDI_VM_AIL,
    ADLMIDI_VM_9X_GENERIC_FM,
    ADLMIDI_VM_HMI,
    ADLMIDI_VM_HMI_OLD
@} Mix_ADLMIDI_VolumeModel;
@end example
@end cartouche

@b{ADLMIDI_VM_AUTO} is automatical choice of volume model in dependence from selected bank.@*
Otherwise they are self explanatory.

@c -----------------------------------------------------------------------------
@page
@node Mix_ADLMIDI_Emulator
@section Mix_ADLMIDI_Emulator
@tindex Mix_ADLMIDI_Emulator

@cartouche
@example
typedef enum @{
    ADLMIDI_OPL3_EMU_DEFAULT = -1,
    ADLMIDI_OPL3_EMU_NUKED = 0,
    ADLMIDI_OPL3_EMU_NUKED_1_7_4,
    ADLMIDI_OPL3_EMU_DOSBOX,
    ADLMIDI_OPL3_EMU_OPAL,
    ADLMIDI_OPL3_EMU_JAVA
@} Mix_ADLMIDI_Emulator;
@end example
@end cartouche

@b{ADLMIDI_OPL3_EMU_NUKED} is a Nuked OPL3 1.8 emulator which a very accurate, but needs a powerful CPU.@*
@b{ADLMIDI_OPL3_EMU_NUKED_1_7_4} is an unofficial optimized Nuked OPL3 1.7.4. Needs a powerful CPU.@*
@b{ADLMIDI_OPL3_EMU_DOSBOX} is a DosBox 0.74 emulator. Fast emulator.@*
@b{ADLMIDI_OPL3_EMU_OPAL} is a Opal emulator made by developers of the Reality Adlib Tracker. Doesn't implements rhythm mode.@*
@b{ADLMIDI_OPL3_EMU_JAVA} is a C++ port of the "That Vintage Tone" Java-written emulator by Robson Cozendey.

@c -----------------------------------------------------------------------------
@page
@node Mix_OPNMIDI_VolumeModel
@section Mix_OPNMIDI_VolumeModel
@tindex Mix_OPNMIDI_VolumeModel

@cartouche
@example
typedef enum @{
    OPNMIDI_VM_AUTO,
    OPNMIDI_VM_GENERIC,
    OPNMIDI_VM_NATIVE,
    OPNMIDI_VM_DMX,
    OPNMIDI_VM_APOGEE,
    OPNMIDI_VM_9X
@} Mix_OPNMIDI_VolumeModel;
@end example
@end cartouche

@b{OPNMIDI_VM_AUTO} is automatical choice of volume model in dependence from selected bank.@*
Otherwise they are self explanatory.


@c -----------------------------------------------------------------------------
@page
@node Mix_OPNMIDI_Emulator
@section Mix_OPNMIDI_Emulator
@tindex Mix_OPNMIDI_Emulator

@cartouche
@example
typedef enum @{
    OPNMIDI_OPN2_EMU_DEFAULT = -1,
    OPNMIDI_OPN2_EMU_MAME_OPN2 = 0,
    OPNMIDI_OPN2_EMU_NUKED,
    OPNMIDI_OPN2_EMU_GENS,
    OPNMIDI_OPN2_EMU_GX, /* Caution: THIS emulator is inavailable by default */
    OPNMIDI_OPN2_EMU_NP2,
    OPNMIDI_OPN2_EMU_MAME_OPNA,
    OPNMIDI_OPN2_EMU_PMDWIN
@} Mix_OPNMIDI_Emulator;
@end example
@end cartouche

@b{OPNMIDI_OPN2_EMU_MIME} is a MAME YM2612 emulator, fast and well-accurate.@*
@b{OPNMIDI_OPN2_EMU_NUKED} is a Nuked OPN2 is a very accurate, but needs a VERY powerful CPU. It's much stronger even than Nuked OPL3!@*
@b{OPNMIDI_OPN2_EMU_GENS} is a GENS GS/II emulator. Isn't so accurate, but the fastest emulator here.@*
@b{OPNMIDI_OPN2_EMU_GX} is a Genesis Plus GX emulator, a fork of the MAME. Experimental and usually disabled by default at the libOPNMIDI side.@*
@b{OPNMIDI_OPN2_EMU_NP2} is a Neko Project II Kai OPNA emulator. Performance is almost same as GENS.@*
@b{OPNMIDI_OPN2_EMU_MAME_OPNA} is a MIME OPNA emulator, very similar to MAME YM2612, but works a bit differently.@*
@b{OPNMIDI_OPN2_EMU_PMDWIN} is a PMDWIN OPNA emulator, old and dirty emulator.

@c -----------------------------------------------------------------------------
@page
@node Mix_Fading
@section Mix_Fading
@tindex Mix_Fading

@cartouche
@example
typedef enum @{
    MIX_NO_FADING,
    MIX_FADING_OUT,
    MIX_FADING_IN
@} Mix_Fading;
@end example
@end cartouche

Return values from @code{Mix_FadingMusic} and @code{Mix_FadingChannel} are of these enumerated values.
If no fading is taking place on the queried channel or music, then @b{MIX_NO_FADING} is returned.
Otherwise they are self explanatory.

@noindent
@b{See Also}:@*
@ref{Mix_FadingChannel},
@ref{Mix_FadingMusic}

@c -----------------------------------------------------------------------------
@page
@node Mix_EffectFunc_t
@section Mix_EffectFunc_t
@tindex Mix_EffectFunc_t

@cartouche
@example
typedef void (*Mix_EffectFunc_t)(int @var{chan}, void *@var{stream}, int @var{len},
                                 void *@var{udata});
@end example
@end cartouche

@table @var
@item chan
The channel number that this effect is effecting now.@*
@b{MIX_CHANNEL_POST} is passed in for post processing effects over the final mix.
@item stream
The buffer containing the current sample to process.
@item len
The length of @var{stream} in bytes.
@item udata
User data pointer that was passed in to @code{Mix_RegisterEffect} when registering this
effect processor function.
@end table

@noindent
This is the prototype for effect processing functions.
These functions are used to apply effects processing on a sample chunk.
As a channel plays a sample, the registered effect functions are called.
Each effect would then read and perhaps alter the @var{len} bytes of @var{stream}.
It may also be advantageous to keep the effect state in the @var{udata}, with would be setup when registering the effect function on a channel.

@noindent
@b{See Also}:@*
@ref{Mix_RegisterEffect}
@ref{Mix_UnregisterEffect}

@c -----------------------------------------------------------------------------
@page
@node Mix_EffectDone_t
@section Mix_EffectDone_t
@tindex Mix_EffectDone_t

@cartouche
@example
typedef void (*Mix_EffectDone_t)(int @var{chan}, void *@var{udata});
@end example
@end cartouche

@table @var
@item chan
The channel number that this effect is effecting now.@*
@b{MIX_CHANNEL_POST} is passed in for post processing effects over the final mix.
@item udata
User data pointer that was passed in to @code{Mix_RegisterEffect} when registering this
effect processor function.
@end table

@noindent
This is the prototype for effect processing functions.
This is called when a channel has finished playing, or halted, or is deallocated.
This is also called when a processor is unregistered while processing is active.
At that time the effects processing function may want to reset some internal variables
or free some memory.  It should free memory at least, because the processor could be freed after this call.

@noindent
@b{See Also}:@*
@ref{Mix_RegisterEffect}
@ref{Mix_UnregisterEffect}


@c -----------------------------------------------------------------------------
@page
@node Mix_MusicEffectFunc_t
@section Mix_MusicEffectFunc_t
@tindex Mix_MusicEffectFunc_t

@cartouche
@example
typedef void (*Mix_MusicEffectFunc_t)(Mix_Music *@var{music}, void *@var{stream}, int @var{len},
                                 void *@var{udata});
@end example
@end cartouche

@table @var
@item music
The music that this effect is effecting now.@*
@item stream
The buffer containing the current sample to process.
@item len
The length of @var{stream} in bytes.
@item udata
User data pointer that was passed in to @code{Mix_RegisterMusicEffect} when registering this
effect processor function.
@end table

@noindent
This is the prototype for effect processing functions.
These functions are used to apply effects processing on a music.
As a music plays a sample, the registered effect functions are called.
Each effect would then read and perhaps alter the @var{len} bytes of @var{stream}.
It may also be advantageous to keep the effect state in the @var{udata},
with would be setup when registering the effect function on a channel.

@noindent
@b{See Also}:@*
@ref{Mix_RegisterMusicEffect}
@ref{Mix_UnregisterMusicEffect}


@c -----------------------------------------------------------------------------
@page
@node Mix_MusicEffectDone_t
@section Mix_MusicEffectDone_t
@tindex Mix_MusicEffectDone_t

@cartouche
@example
typedef void (*Mix_MusicEffectDone_t)(Mix_Music @var{music}, void *@var{udata});
@end example
@end cartouche

@table @var
@item music
The music that this effect is effecting now.@*
@item udata
User data pointer that was passed in to @code{Mix_RegisterMusicEffect} when registering this
effect processor function.
@end table

@noindent
This is the prototype for effect processing functions.
This is called when a music has finished playing, or halted, or is deallocated.
This is also called when a processor is unregistered while processing is active.
At that time the effects processing function may want to reset some internal variables
or free some memory.  It should free memory at least, because the processor could be freed after this call.

@noindent
@b{See Also}:@*
@ref{Mix_RegisterMusicEffect}
@ref{Mix_UnregisterMusicEffect}


@c -----------------------------------------------------------------------------
@page
@node Mix_CommonMixer_t
@section Mix_CommonMixer_t
@tindex Mix_CommonMixer_t

@cartouche
@example
typedef void (*Mix_CommonMixer_t)(void *@var{udata}, void *@var{stream}, int @var{len});
@end example
@end cartouche

@table @var
@item udata
User data pointer that you can pass into the function.
@item stream
The destination buffer to write the data.@*
@item len
The length of the buffer to write the data.@*
@end table

@noindent
This is the prototype for the internal mixer processing callback.
You should to call given callbacks to run the internal mixer processing
and get the final audio data ready for output.

@noindent
@b{See Also}:@*
@ref{Mix_GetMusicMixer}
@ref{Mix_GetMultiMusicMixer}
@ref{Mix_GetGeneralMixer}
