@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@c -----------------------------------------------------------------------------
@node Groups
@section Groups

These functions work with groupings of mixer channels.

The default group tag number of -1, which refers to ALL channels.

@menu
@b{Setup}
* Mix_ReserveChannels::   Prevent channels from being used in default group

@b{TODO}
* Mix_GroupChannel::      Add/remove channel to/from group
* Mix_GroupChannels::     Add/remove segment of channels to/from group

@b{Info}
* Mix_GroupCount::        Get number of channels in group
* Mix_GroupAvailable::    Get first inactive channel in group
* Mix_GroupOldest::       Get oldest busy channel in group
* Mix_GroupNewer::        Get youngest busy channel in group

@b{Stopping}
* Mix_FadeOutGroup::      Fade out a group over time
* Mix_HaltGroup::         Stop a group
@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_ReserveChannels
@subsection Mix_ReserveChannels
@findex Mix_ReserveChannels
@findex Mix_PlayChannel
@findex Mix_PlayChannelTimed
@findex Mix_FadeInChannel
@findex Mix_FadeInChannelTimed

@noindent
@code{int @b{Mix_ReserveChannels}(int @var{num})}

@table @var
@item num
Number of channels to reserve from default mixing.@*
Zero removes all reservations.
@end table

@noindent
Reserve @var{num} channels from being used when playing samples when passing in -1 as a channel number to playback functions.
The channels are reserved starting from channel 0 to @var{num}-1.
Passing in zero will unreserve all channels.
Normally SDL_mixer starts without any channels reserved.

@noindent
The following functions are affected by this setting:@*
@ref{Mix_PlayChannel}@*
@ref{Mix_PlayChannelTimed}@*
@ref{Mix_FadeInChannel}@*
@ref{Mix_FadeInChannelTimed}@*

@noindent
@b{Returns}: The number of channels reserved.  Never fails, but may return less channels than you ask for, depending on the number of channels previously allocated.

@cartouche
@example
// reserve the first 8 mixing channels
int reserved_count;
reserved_count=Mix_ReserveChannels(8);
if(reserved_count!=8) @{
    printf("reserved %d channels from default mixing.\n",reserved_count);
    printf("8 channels were not reserved!\n");
    // this might be a critical error...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_AllocateChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupChannel
@subsection Mix_GroupChannel
@findex Mix_GroupChannel

@noindent
@code{int @b{Mix_GroupChannel}(int @var{which}, int @var{tag})}

@table @var
@item which
Channel number of channels to assign @var{tag} to.
@item tag
A group number Any positive numbers (including zero).@*
-1 is the default group.  Use -1 to remove a group tag essentially.
@end table

@noindent
Add @var{which} channel to group @var{tag},
or reset it's group to the default group tag (-1).

@noindent
@b{Returns}: True(1) on success. False(0) is returned when the channel specified is invalid.

@cartouche
@example
// add channel 0 to group 1
if(!Mix_GroupChannel(0,1)) @{
    // bad channel, apparently channel 1 isn't allocated
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupChannels},
@ref{Mix_AllocateChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupChannels
@subsection Mix_GroupChannels
@findex Mix_GroupChannels

@noindent
@code{int @b{Mix_GroupChannels}(int @var{from}, int @var{to}, int @var{tag})}

@table @var
@item from
First Channel number of channels to assign @var{tag} to.  Must be less or equal to @var{to}.
@item to
Last Channel number of channels to assign @var{tag} to.  Must be greater or equal to @var{from}.
@item tag
A group number.  Any positive numbers (including zero).@*
-1 is the default group.  Use -1 to remove a group tag essentially.
@end table

@noindent
Add channels starting at @var{from} up through @var{to} to group @var{tag},
or reset it's group to the default group tag (-1).

@noindent
@b{Returns}: The number of tagged channels on success. If that number is less than @var{to}-@var{from}+1 then some channels were no tagged because they didn't exist.

@cartouche
@example
// add channels 0 through 7 to group 1
if(Mix_GroupChannels(0,7,1)!=8) @{
    // some bad channels, apparently some channels aren't allocated
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupChannel},
@ref{Mix_AllocateChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupCount
@subsection Mix_GroupCount
@findex Mix_GroupCount

@noindent
@code{int @b{Mix_GroupCount}(int @var{tag})}

@table @var
@item tag
A group number Any positive numbers (including zero).@*
-1 will count ALL channels.
@end table

@noindent
Count the number of channels in group @var{tag}.

@noindent
@b{Returns}: The number of channels found in the group.  This function never fails.

@cartouche
@example
// count the number of channels in group 1
printf("There are %d channels in group 1\n", Mix_GroupCount(1));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupChannel},
@ref{Mix_GroupChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupAvailable
@subsection Mix_GroupAvailable
@findex Mix_GroupAvailable

@noindent
@code{int @b{Mix_GroupAvailable}(int @var{tag})}

@table @var
@item tag
A group number Any positive numbers (including zero).@*
-1 will search ALL channels.
@end table

@noindent
Find the first available (not playing) channel in group @var{tag}.

@noindent
@b{Returns}: The channel found on success. -1 is returned when no channels in the group are available.

@cartouche
@example
// find the first available channel in group 1
int channel;
channel=Mix_GroupAvailable(1);
if (channel==-1) @{
    // no channel available...
    // perhaps search for oldest or newest channel in use...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupOldest},
@ref{Mix_GroupNewer},
@ref{Mix_GroupChannel},
@ref{Mix_GroupChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupOldest
@subsection Mix_GroupOldest
@findex Mix_GroupOldest

@noindent
@code{int @b{Mix_GroupOldest}(int @var{tag})}

@table @var
@item tag
A group number Any positive numbers (including zero).@*
-1 will search ALL channels.
@end table

@noindent
Find the oldest actively playing channel in group @var{tag}.

@noindent
@b{Returns}: The channel found on success. -1 is returned when no channels in the group are playing or the group is empty.

@cartouche
@example
// find the oldest playing channel in group 1
int channel;
channel=Mix_GroupOldest(1);
if (channel==-1) @{
    // no channel playing or allocated...
    // perhaps just search for an available channel...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupNewer},
@ref{Mix_GroupAvailable},
@ref{Mix_GroupChannel},
@ref{Mix_GroupChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_GroupNewer
@subsection Mix_GroupNewer
@findex Mix_GroupNewer

@noindent
@code{int @b{Mix_GroupNewer}(int @var{tag})}

@table @var
@item tag
A group number Any positive numbers (including zero).@*
-1 will search ALL channels.
@end table

@noindent
Find the newest, most recently started, actively playing channel in group @var{tag}.

@noindent
@b{Returns}: The channel found on success. -1 is returned when no channels in the group are playing or the group is empty.

@cartouche
@example
// find the newest playing channel in group 1
int channel;
channel=Mix_GroupNewer(1);
if (channel==-1) @{
    // no channel playing or allocated...
    // perhaps just search for an available channel...
@}
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_GroupOldest},
@ref{Mix_GroupAvailable},
@ref{Mix_GroupChannel},
@ref{Mix_GroupChannels}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_FadeOutGroup
@subsection Mix_FadeOutGroup
@findex Mix_FadeOutGroup

@noindent
@code{int @b{Mix_FadeOutGroup}(int @var{tag}, int @var{ms})}

@table @var
@item tag
Group to fade out.@*
@b{NOTE}: -1 will @b{NOT} fade all channels out.  Use @code{Mix_FadeOutChannel(-1)} for that instead.
@item ms
Milliseconds of time that the fade-out effect should take to go to silence, starting now.
@end table

@noindent
Gradually fade out channels in group @var{tag} over @var{ms} milliseconds starting from now.
The channels will be halted after the fade out is completed.  Only channels that are playing are set to fade out, including paused channels.
Any callback set by @code{Mix_ChannelFinished} will be called when each channel finishes fading out.

@noindent
@b{Returns}: The number of channels set to fade out.

@cartouche
@example
// fade out all channels in group 1 to finish 3 seconds from now
printf("starting fade out of %d channels\n", Mix_FadeOutGroup(1, 3000));
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_HaltGroup},
@ref{Mix_FadeOutChannel},
@ref{Mix_FadingChannel},
@ref{Mix_ChannelFinished}

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@page
@node Mix_HaltGroup
@subsection Mix_HaltGroup
@findex Mix_HaltGroup

@noindent
@code{int @b{Mix_HaltGroup}(int @var{tag})}

@table @var
@item tag
Group to fade out.@*
@b{NOTE}: -1 will @b{NOT} halt all channels.  Use @code{Mix_HaltChannel(-1)} for that instead.
@end table

@noindent
Halt playback on all channels in group @var{tag}.@*
Any callback set by @code{Mix_ChannelFinished} will be called once for each channel that stops.

@noindent
@b{Returns}: always returns zero. (more silly than @var{Mix_HaltChannel})

@cartouche
@example
// halt playback on all channels in group 1
Mix_HaltGroup(1);
@end example
@end cartouche

@noindent
@b{See Also}:@*
@ref{Mix_FadeOutGroup},
@ref{Mix_HaltChannel},
@ref{Mix_ChannelFinished}
